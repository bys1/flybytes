/** 
 * Copyright (c) 2019, Centrum Wiskunde & Informatica (CWI)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// This code was generated by lang::flybytes::internal::ASTgen
package lang.flybytes.internal;

import io.usethesource.vallang.type.Type;
import io.usethesource.vallang.type.TypeFactory;
import io.usethesource.vallang.type.TypeStore;
import io.usethesource.vallang.*;

public class AST {
  private static TypeStore typestore = new TypeStore();
  private static TypeFactory tf = TypeFactory.getInstance();
  private IValueFactory vf;

  public AST (IValueFactory vf) {
    this.vf = vf;
  }

  private static final Type _Class = tf.abstractDataType(typestore, "Class");
  private static final Type _Field = tf.abstractDataType(typestore, "Field");
  private static final Type _Method = tf.abstractDataType(typestore, "Method");
  private static final Type _Annotation = tf.abstractDataType(typestore, "Annotation");
  private static final Type _BootstrapCall = tf.abstractDataType(typestore, "BootstrapCall");
  private static final Type _CallSiteInfo = tf.abstractDataType(typestore, "CallSiteInfo");
  private static final Type _Case = tf.abstractDataType(typestore, "Case");
  private static final Type _Exp = tf.abstractDataType(typestore, "Exp");
  private static final Type _Formal = tf.abstractDataType(typestore, "Formal");
  private static final Type _Handler = tf.abstractDataType(typestore, "Handler");
  private static final Type _Instruction = tf.abstractDataType(typestore, "Instruction");
  private static final Type _Modifier = tf.abstractDataType(typestore, "Modifier");
  private static final Type _RetentionPolicy = tf.abstractDataType(typestore, "RetentionPolicy");
  private static final Type _Signature = tf.abstractDataType(typestore, "Signature");
  private static final Type _Stat = tf.abstractDataType(typestore, "Stat");
  private static final Type _SwitchOption = tf.abstractDataType(typestore, "SwitchOption");
  private static final Type _Type = tf.abstractDataType(typestore, "Type");
   
  
  
  private static final Type _Class_interface_1 
    = tf.constructor(typestore,_Class,"interface",_Type,"type");
  private static final Type _Class_class_1 
    = tf.constructor(typestore,_Class,"class",_Type,"type");
  
  
  private static final Type _Field_field_2 
    = tf.constructor(typestore,_Field,"field",_Type,"type",tf.stringType(),"name");
  
  
  private static final Type _Method_static_1 
    = tf.constructor(typestore,_Method,"static",tf.listType(_Stat),"block");
  private static final Type _Method_method_1 
    = tf.constructor(typestore,_Method,"method",_Signature,"desc");
  private static final Type _Method_method_3 
    = tf.constructor(typestore,_Method,"method",_Signature,"desc",tf.listType(_Formal),"formals",tf.listType(_Stat),"block");
  private static final Type _Method_procedure_3 
    = tf.constructor(typestore,_Method,"procedure",_Signature,"desc",tf.listType(_Formal),"formals",tf.listType(_Instruction),"instructions");
  
  
  private static final Type _Annotation_anno_3 
    = tf.constructor(typestore,_Annotation,"anno",tf.stringType(),"annoClass",_Type,"type",tf.valueType(),"val");
  private static final Type _Annotation_tag_1 
    = tf.constructor(typestore,_Annotation,"tag",tf.stringType(),"annoClass");
  
  
  private static final Type _BootstrapCall_bootstrap_3 
    = tf.constructor(typestore,_BootstrapCall,"bootstrap",_Type,"class",_Signature,"desc",tf.listType(_CallSiteInfo),"args");
  
  
  private static final Type _CallSiteInfo_integerInfo_1 
    = tf.constructor(typestore,_CallSiteInfo,"integerInfo",tf.integerType(),"i");
  private static final Type _CallSiteInfo_longInfo_1 
    = tf.constructor(typestore,_CallSiteInfo,"longInfo",tf.integerType(),"l");
  private static final Type _CallSiteInfo_doubleInfo_1 
    = tf.constructor(typestore,_CallSiteInfo,"doubleInfo",tf.realType(),"d");
  private static final Type _CallSiteInfo_getterHandle_3 
    = tf.constructor(typestore,_CallSiteInfo,"getterHandle",_Type,"class",tf.stringType(),"name",_Type,"type");
  private static final Type _CallSiteInfo_virtualHandle_3 
    = tf.constructor(typestore,_CallSiteInfo,"virtualHandle",_Type,"class",tf.stringType(),"name",_Signature,"desc");
  private static final Type _CallSiteInfo_classInfo_1 
    = tf.constructor(typestore,_CallSiteInfo,"classInfo",tf.stringType(),"name");
  private static final Type _CallSiteInfo_floatInfo_1 
    = tf.constructor(typestore,_CallSiteInfo,"floatInfo",tf.realType(),"f");
  private static final Type _CallSiteInfo_staticGetterHandle_3 
    = tf.constructor(typestore,_CallSiteInfo,"staticGetterHandle",_Type,"class",tf.stringType(),"name",_Type,"type");
  private static final Type _CallSiteInfo_methodTypeInfo_1 
    = tf.constructor(typestore,_CallSiteInfo,"methodTypeInfo",_Signature,"desc");
  private static final Type _CallSiteInfo_stringInfo_1 
    = tf.constructor(typestore,_CallSiteInfo,"stringInfo",tf.stringType(),"s");
  private static final Type _CallSiteInfo_staticSetterHandle_3 
    = tf.constructor(typestore,_CallSiteInfo,"staticSetterHandle",_Type,"class",tf.stringType(),"name",_Type,"type");
  private static final Type _CallSiteInfo_constructorHandle_2 
    = tf.constructor(typestore,_CallSiteInfo,"constructorHandle",_Type,"class",_Signature,"desc");
  private static final Type _CallSiteInfo_specialHandle_4 
    = tf.constructor(typestore,_CallSiteInfo,"specialHandle",_Type,"class",tf.stringType(),"name",_Signature,"desc",_Type,"caller");
  private static final Type _CallSiteInfo_setterHandle_3 
    = tf.constructor(typestore,_CallSiteInfo,"setterHandle",_Type,"class",tf.stringType(),"name",_Type,"type");
  
  
  private static final Type _Case_default_1 
    = tf.constructor(typestore,_Case,"default",tf.listType(_Stat),"block");
  private static final Type _Case_case_2 
    = tf.constructor(typestore,_Case,"case",tf.integerType(),"key",tf.listType(_Stat),"block");
  
  
  private static final Type _Exp_instanceof_2 
    = tf.constructor(typestore,_Exp,"instanceof",_Exp,"arg",_Type,"class");
  private static final Type _Exp_eq_2 
    = tf.constructor(typestore,_Exp,"eq",_Exp,"lhs",_Exp,"rhs");
  private static final Type _Exp_lt_2 
    = tf.constructor(typestore,_Exp,"lt",_Exp,"lhs",_Exp,"rhs");
  private static final Type _Exp_ushr_2 
    = tf.constructor(typestore,_Exp,"ushr",_Exp,"lhs",_Exp,"shift");
  private static final Type _Exp_alength_1 
    = tf.constructor(typestore,_Exp,"alength",_Exp,"arg");
  private static final Type _Exp_shl_2 
    = tf.constructor(typestore,_Exp,"shl",_Exp,"lhs",_Exp,"shift");
  private static final Type _Exp_div_2 
    = tf.constructor(typestore,_Exp,"div",_Exp,"lhs",_Exp,"rhs");
  private static final Type _Exp_false_0 
    = tf.constructor(typestore,_Exp,"false");
  private static final Type _Exp_checkcast_2 
    = tf.constructor(typestore,_Exp,"checkcast",_Exp,"arg",_Type,"type");
  private static final Type _Exp_xor_2 
    = tf.constructor(typestore,_Exp,"xor",_Exp,"lhs",_Exp,"rhs");
  private static final Type _Exp_mul_2 
    = tf.constructor(typestore,_Exp,"mul",_Exp,"lhs",_Exp,"rhs");
  private static final Type _Exp_sand_2 
    = tf.constructor(typestore,_Exp,"sand",_Exp,"lhs",_Exp,"rhs");
  private static final Type _Exp_aload_2 
    = tf.constructor(typestore,_Exp,"aload",_Exp,"array",_Exp,"index");
  private static final Type _Exp_add_2 
    = tf.constructor(typestore,_Exp,"add",_Exp,"lhs",_Exp,"rhs");
  private static final Type _Exp_coerce_3 
    = tf.constructor(typestore,_Exp,"coerce",_Type,"from",_Type,"to",_Exp,"arg");
  private static final Type _Exp_sub_2 
    = tf.constructor(typestore,_Exp,"sub",_Exp,"lhs",_Exp,"rhs");
  private static final Type _Exp_getField_4 
    = tf.constructor(typestore,_Exp,"getField",_Type,"class",_Exp,"receiver",_Type,"type",tf.stringType(),"name");
  private static final Type _Exp_invokeDynamic_3 
    = tf.constructor(typestore,_Exp,"invokeDynamic",_BootstrapCall,"handle",_Signature,"desc",tf.listType(_Exp),"args");
  private static final Type _Exp_newArray_2 
    = tf.constructor(typestore,_Exp,"newArray",_Type,"type",_Exp,"size");
  private static final Type _Exp_or_2 
    = tf.constructor(typestore,_Exp,"or",_Exp,"lhs",_Exp,"rhs");
  private static final Type _Exp_neg_1 
    = tf.constructor(typestore,_Exp,"neg",_Exp,"arg");
  private static final Type _Exp_invokeVirtual_4 
    = tf.constructor(typestore,_Exp,"invokeVirtual",_Type,"class",_Exp,"receiver",_Signature,"desc",tf.listType(_Exp),"args");
  private static final Type _Exp_gt_2 
    = tf.constructor(typestore,_Exp,"gt",_Exp,"lhs",_Exp,"rhs");
  private static final Type _Exp_sblock_2 
    = tf.constructor(typestore,_Exp,"sblock",tf.listType(_Stat),"statements",_Exp,"arg");
  private static final Type _Exp_const_2 
    = tf.constructor(typestore,_Exp,"const",_Type,"type",tf.valueType(),"constant");
  private static final Type _Exp_invokeStatic_3 
    = tf.constructor(typestore,_Exp,"invokeStatic",_Type,"class",_Signature,"desc",tf.listType(_Exp),"args");
  private static final Type _Exp_null_0 
    = tf.constructor(typestore,_Exp,"null");
  private static final Type _Exp_ne_2 
    = tf.constructor(typestore,_Exp,"ne",_Exp,"lhs",_Exp,"rhs");
  private static final Type _Exp_and_2 
    = tf.constructor(typestore,_Exp,"and",_Exp,"lhs",_Exp,"rhs");
  private static final Type _Exp_inc_2 
    = tf.constructor(typestore,_Exp,"inc",tf.stringType(),"name",tf.integerType(),"inc");
  private static final Type _Exp_sor_2 
    = tf.constructor(typestore,_Exp,"sor",_Exp,"lhs",_Exp,"rhs");
  private static final Type _Exp_invokeSpecial_4 
    = tf.constructor(typestore,_Exp,"invokeSpecial",_Type,"class",_Exp,"receiver",_Signature,"desc",tf.listType(_Exp),"args");
  private static final Type _Exp_invokeInterface_4 
    = tf.constructor(typestore,_Exp,"invokeInterface",_Type,"class",_Exp,"receiver",_Signature,"desc",tf.listType(_Exp),"args");
  private static final Type _Exp_newInstance_3 
    = tf.constructor(typestore,_Exp,"newInstance",_Type,"class",_Signature,"desc",tf.listType(_Exp),"args");
  private static final Type _Exp_cond_3 
    = tf.constructor(typestore,_Exp,"cond",_Exp,"condition",_Exp,"thenExp",_Exp,"elseExp");
  private static final Type _Exp_load_1 
    = tf.constructor(typestore,_Exp,"load",tf.stringType(),"name");
  private static final Type _Exp_shr_2 
    = tf.constructor(typestore,_Exp,"shr",_Exp,"lhs",_Exp,"shift");
  private static final Type _Exp_true_0 
    = tf.constructor(typestore,_Exp,"true");
  private static final Type _Exp_ge_2 
    = tf.constructor(typestore,_Exp,"ge",_Exp,"lhs",_Exp,"rhs");
  private static final Type _Exp_getStatic_3 
    = tf.constructor(typestore,_Exp,"getStatic",_Type,"class",_Type,"type",tf.stringType(),"name");
  private static final Type _Exp_le_2 
    = tf.constructor(typestore,_Exp,"le",_Exp,"lhs",_Exp,"rhs");
  private static final Type _Exp_newInitArray_2 
    = tf.constructor(typestore,_Exp,"newInitArray",_Type,"type",tf.listType(_Exp),"args");
  private static final Type _Exp_rem_2 
    = tf.constructor(typestore,_Exp,"rem",_Exp,"lhs",_Exp,"rhs");
  
  
  private static final Type _Formal_var_2 
    = tf.constructor(typestore,_Formal,"var",_Type,"type",tf.stringType(),"name");
  
  
  private static final Type _Handler_finally_1 
    = tf.constructor(typestore,_Handler,"finally",tf.listType(_Stat),"block");
  private static final Type _Handler_catch_3 
    = tf.constructor(typestore,_Handler,"catch",_Type,"type",tf.stringType(),"name",tf.listType(_Stat),"block");
  
  
  private static final Type _Instruction_LDC_2 
    = tf.constructor(typestore,_Instruction,"LDC",_Type,"type",tf.valueType(),"constant");
  private static final Type _Instruction_IF_ACMPNE_1 
    = tf.constructor(typestore,_Instruction,"IF_ACMPNE",tf.stringType(),"label");
  private static final Type _Instruction_FRETURN_0 
    = tf.constructor(typestore,_Instruction,"FRETURN");
  private static final Type _Instruction_DREM_0 
    = tf.constructor(typestore,_Instruction,"DREM");
  private static final Type _Instruction_exp_1 
    = tf.constructor(typestore,_Instruction,"exp",_Exp,"expression");
  private static final Type _Instruction_ANEWARRAY_1 
    = tf.constructor(typestore,_Instruction,"ANEWARRAY",_Type,"type");
  private static final Type _Instruction_ISUB_0 
    = tf.constructor(typestore,_Instruction,"ISUB");
  private static final Type _Instruction_ISHR_0 
    = tf.constructor(typestore,_Instruction,"ISHR");
  private static final Type _Instruction_LSUB_0 
    = tf.constructor(typestore,_Instruction,"LSUB");
  private static final Type _Instruction_MULTIANEWARRAY_2 
    = tf.constructor(typestore,_Instruction,"MULTIANEWARRAY",_Type,"type",tf.integerType(),"numDimensions");
  private static final Type _Instruction_SALOAD_0 
    = tf.constructor(typestore,_Instruction,"SALOAD");
  private static final Type _Instruction_DSTORE_1 
    = tf.constructor(typestore,_Instruction,"DSTORE",tf.integerType(),"var");
  private static final Type _Instruction_FREM_0 
    = tf.constructor(typestore,_Instruction,"FREM");
  private static final Type _Instruction_LUSHR_0 
    = tf.constructor(typestore,_Instruction,"LUSHR");
  private static final Type _Instruction_DRETURN_0 
    = tf.constructor(typestore,_Instruction,"DRETURN");
  private static final Type _Instruction_IF_ICMPGE_1 
    = tf.constructor(typestore,_Instruction,"IF_ICMPGE",tf.stringType(),"label");
  private static final Type _Instruction_LADD_0 
    = tf.constructor(typestore,_Instruction,"LADD");
  private static final Type _Instruction_IXOR_0 
    = tf.constructor(typestore,_Instruction,"IXOR");
  private static final Type _Instruction_FSTORE_1 
    = tf.constructor(typestore,_Instruction,"FSTORE",tf.integerType(),"var");
  private static final Type _Instruction_LOCALVARIABLE_5 
    = tf.constructor(typestore,_Instruction,"LOCALVARIABLE",tf.stringType(),"name",_Type,"type",tf.stringType(),"start",tf.stringType(),"end",tf.integerType(),"var");
  private static final Type _Instruction_SASTORE_0 
    = tf.constructor(typestore,_Instruction,"SASTORE");
  private static final Type _Instruction_IFGE_1 
    = tf.constructor(typestore,_Instruction,"IFGE",tf.stringType(),"label");
  private static final Type _Instruction_DUP2_0 
    = tf.constructor(typestore,_Instruction,"DUP2");
  private static final Type _Instruction_SWAP_0 
    = tf.constructor(typestore,_Instruction,"SWAP");
  private static final Type _Instruction_FCONST_2_0 
    = tf.constructor(typestore,_Instruction,"FCONST_2");
  private static final Type _Instruction_IF_ICMPLE_1 
    = tf.constructor(typestore,_Instruction,"IF_ICMPLE",tf.stringType(),"label");
  private static final Type _Instruction_RETURN_0 
    = tf.constructor(typestore,_Instruction,"RETURN");
  private static final Type _Instruction_DCONST_0_0 
    = tf.constructor(typestore,_Instruction,"DCONST_0");
  private static final Type _Instruction_ICONST_5_0 
    = tf.constructor(typestore,_Instruction,"ICONST_5");
  private static final Type _Instruction_IREM_0 
    = tf.constructor(typestore,_Instruction,"IREM");
  private static final Type _Instruction_IUSHR_0 
    = tf.constructor(typestore,_Instruction,"IUSHR");
  private static final Type _Instruction_POP_0 
    = tf.constructor(typestore,_Instruction,"POP");
  private static final Type _Instruction_DCONST_1_0 
    = tf.constructor(typestore,_Instruction,"DCONST_1");
  private static final Type _Instruction_LSHR_0 
    = tf.constructor(typestore,_Instruction,"LSHR");
  private static final Type _Instruction_ARETURN_0 
    = tf.constructor(typestore,_Instruction,"ARETURN");
  private static final Type _Instruction_ISTORE_1 
    = tf.constructor(typestore,_Instruction,"ISTORE",tf.integerType(),"var");
  private static final Type _Instruction_L2D_0 
    = tf.constructor(typestore,_Instruction,"L2D");
  private static final Type _Instruction_IFLE_1 
    = tf.constructor(typestore,_Instruction,"IFLE",tf.stringType(),"label");
  private static final Type _Instruction_INVOKEDYNAMIC_2 
    = tf.constructor(typestore,_Instruction,"INVOKEDYNAMIC",_Signature,"desc",_BootstrapCall,"handle");
  private static final Type _Instruction_MONITORENTER_0 
    = tf.constructor(typestore,_Instruction,"MONITORENTER");
  private static final Type _Instruction_D2L_0 
    = tf.constructor(typestore,_Instruction,"D2L");
  private static final Type _Instruction_FMUL_0 
    = tf.constructor(typestore,_Instruction,"FMUL");
  private static final Type _Instruction_IF_ICMPNE_1 
    = tf.constructor(typestore,_Instruction,"IF_ICMPNE",tf.stringType(),"label");
  private static final Type _Instruction_IALOAD_0 
    = tf.constructor(typestore,_Instruction,"IALOAD");
  private static final Type _Instruction_ARRAYLENGTH_0 
    = tf.constructor(typestore,_Instruction,"ARRAYLENGTH");
  private static final Type _Instruction_INVOKEVIRTUAL_3 
    = tf.constructor(typestore,_Instruction,"INVOKEVIRTUAL",_Type,"class",_Signature,"desc",tf.boolType(),"isInterface");
  private static final Type _Instruction_DUP_0 
    = tf.constructor(typestore,_Instruction,"DUP");
  private static final Type _Instruction_IFNONNULL_1 
    = tf.constructor(typestore,_Instruction,"IFNONNULL",tf.stringType(),"label");
  private static final Type _Instruction_LABEL_1 
    = tf.constructor(typestore,_Instruction,"LABEL",tf.stringType(),"label");
  private static final Type _Instruction_DSUB_0 
    = tf.constructor(typestore,_Instruction,"DSUB");
  private static final Type _Instruction_TABLESWITCH_4 
    = tf.constructor(typestore,_Instruction,"TABLESWITCH",tf.integerType(),"min",tf.integerType(),"max",tf.stringType(),"defaultLabel",tf.listType(tf.stringType()),"labels");
  private static final Type _Instruction_IFNE_1 
    = tf.constructor(typestore,_Instruction,"IFNE",tf.stringType(),"label");
  private static final Type _Instruction_LSTORE_1 
    = tf.constructor(typestore,_Instruction,"LSTORE",tf.integerType(),"var");
  private static final Type _Instruction_LRETURN_0 
    = tf.constructor(typestore,_Instruction,"LRETURN");
  private static final Type _Instruction_F2I_0 
    = tf.constructor(typestore,_Instruction,"F2I");
  private static final Type _Instruction_DADD_0 
    = tf.constructor(typestore,_Instruction,"DADD");
  private static final Type _Instruction_I2F_0 
    = tf.constructor(typestore,_Instruction,"I2F");
  private static final Type _Instruction_NEWARRAY_1 
    = tf.constructor(typestore,_Instruction,"NEWARRAY",_Type,"element");
  private static final Type _Instruction_DUP_X2_0 
    = tf.constructor(typestore,_Instruction,"DUP_X2");
  private static final Type _Instruction_LCMP_0 
    = tf.constructor(typestore,_Instruction,"LCMP");
  private static final Type _Instruction_stat_1 
    = tf.constructor(typestore,_Instruction,"stat",_Stat,"statement");
  private static final Type _Instruction_FSUB_0 
    = tf.constructor(typestore,_Instruction,"FSUB");
  private static final Type _Instruction_I2C_0 
    = tf.constructor(typestore,_Instruction,"I2C");
  private static final Type _Instruction_PUTSTATIC_3 
    = tf.constructor(typestore,_Instruction,"PUTSTATIC",_Type,"class",tf.stringType(),"name",_Type,"type");
  private static final Type _Instruction_LALOAD_0 
    = tf.constructor(typestore,_Instruction,"LALOAD");
  private static final Type _Instruction_IF_ACMPEQ_1 
    = tf.constructor(typestore,_Instruction,"IF_ACMPEQ",tf.stringType(),"label");
  private static final Type _Instruction_LOOKUPSWITCH_3 
    = tf.constructor(typestore,_Instruction,"LOOKUPSWITCH",tf.stringType(),"defaultLabel",tf.listType(tf.integerType()),"keys",tf.listType(tf.stringType()),"labels");
  private static final Type _Instruction_FADD_0 
    = tf.constructor(typestore,_Instruction,"FADD");
  private static final Type _Instruction_IMUL_0 
    = tf.constructor(typestore,_Instruction,"IMUL");
  private static final Type _Instruction_I2D_0 
    = tf.constructor(typestore,_Instruction,"I2D");
  private static final Type _Instruction_D2I_0 
    = tf.constructor(typestore,_Instruction,"D2I");
  private static final Type _Instruction_LLOAD_1 
    = tf.constructor(typestore,_Instruction,"LLOAD",tf.integerType(),"var");
  private static final Type _Instruction_IADD_0 
    = tf.constructor(typestore,_Instruction,"IADD");
  private static final Type _Instruction_LMUL_0 
    = tf.constructor(typestore,_Instruction,"LMUL");
  private static final Type _Instruction_F2D_0 
    = tf.constructor(typestore,_Instruction,"F2D");
  private static final Type _Instruction_MONITOREXIT_0 
    = tf.constructor(typestore,_Instruction,"MONITOREXIT");
  private static final Type _Instruction_D2F_0 
    = tf.constructor(typestore,_Instruction,"D2F");
  private static final Type _Instruction_IRETURN_0 
    = tf.constructor(typestore,_Instruction,"IRETURN");
  private static final Type _Instruction_DUP_X1_0 
    = tf.constructor(typestore,_Instruction,"DUP_X1");
  private static final Type _Instruction_I2B_0 
    = tf.constructor(typestore,_Instruction,"I2B");
  private static final Type _Instruction_SIPUSH_1 
    = tf.constructor(typestore,_Instruction,"SIPUSH",tf.integerType(),"val");
  private static final Type _Instruction_ILOAD_1 
    = tf.constructor(typestore,_Instruction,"ILOAD",tf.integerType(),"var");
  private static final Type _Instruction_AALOAD_0 
    = tf.constructor(typestore,_Instruction,"AALOAD");
  private static final Type _Instruction_DUP2_X2_0 
    = tf.constructor(typestore,_Instruction,"DUP2_X2");
  private static final Type _Instruction_FASTORE_0 
    = tf.constructor(typestore,_Instruction,"FASTORE");
  private static final Type _Instruction_FCMPG_0 
    = tf.constructor(typestore,_Instruction,"FCMPG");
  private static final Type _Instruction_INEG_0 
    = tf.constructor(typestore,_Instruction,"INEG");
  private static final Type _Instruction_CALOAD_0 
    = tf.constructor(typestore,_Instruction,"CALOAD");
  private static final Type _Instruction_DASTORE_0 
    = tf.constructor(typestore,_Instruction,"DASTORE");
  private static final Type _Instruction_IF_ICMPGT_1 
    = tf.constructor(typestore,_Instruction,"IF_ICMPGT",tf.stringType(),"label");
  private static final Type _Instruction_LNEG_0 
    = tf.constructor(typestore,_Instruction,"LNEG");
  private static final Type _Instruction_ACONST_NULL_0 
    = tf.constructor(typestore,_Instruction,"ACONST_NULL");
  private static final Type _Instruction_ATHROW_0 
    = tf.constructor(typestore,_Instruction,"ATHROW");
  private static final Type _Instruction_DCMPG_0 
    = tf.constructor(typestore,_Instruction,"DCMPG");
  private static final Type _Instruction_BALOAD_0 
    = tf.constructor(typestore,_Instruction,"BALOAD");
  private static final Type _Instruction_DUP2_X1_0 
    = tf.constructor(typestore,_Instruction,"DUP2_X1");
  private static final Type _Instruction_FLOAD_1 
    = tf.constructor(typestore,_Instruction,"FLOAD",tf.integerType(),"var");
  private static final Type _Instruction_LDIV_0 
    = tf.constructor(typestore,_Instruction,"LDIV");
  private static final Type _Instruction_IFGT_1 
    = tf.constructor(typestore,_Instruction,"IFGT",tf.stringType(),"label");
  private static final Type _Instruction_BASTORE_0 
    = tf.constructor(typestore,_Instruction,"BASTORE");
  private static final Type _Instruction_CASTORE_0 
    = tf.constructor(typestore,_Instruction,"CASTORE");
  private static final Type _Instruction_GETSTATIC_3 
    = tf.constructor(typestore,_Instruction,"GETSTATIC",_Type,"class",tf.stringType(),"name",_Type,"type");
  private static final Type _Instruction_L2I_0 
    = tf.constructor(typestore,_Instruction,"L2I");
  private static final Type _Instruction_DLOAD_1 
    = tf.constructor(typestore,_Instruction,"DLOAD",tf.integerType(),"var");
  private static final Type _Instruction_GETFIELD_3 
    = tf.constructor(typestore,_Instruction,"GETFIELD",_Type,"class",tf.stringType(),"name",_Type,"type");
  private static final Type _Instruction_I2L_0 
    = tf.constructor(typestore,_Instruction,"I2L");
  private static final Type _Instruction_DALOAD_0 
    = tf.constructor(typestore,_Instruction,"DALOAD");
  private static final Type _Instruction_IF_ICMPEQ_1 
    = tf.constructor(typestore,_Instruction,"IF_ICMPEQ",tf.stringType(),"label");
  private static final Type _Instruction_L2F_0 
    = tf.constructor(typestore,_Instruction,"L2F");
  private static final Type _Instruction_F2L_0 
    = tf.constructor(typestore,_Instruction,"F2L");
  private static final Type _Instruction_DMUL_0 
    = tf.constructor(typestore,_Instruction,"DMUL");
  private static final Type _Instruction_IFEQ_1 
    = tf.constructor(typestore,_Instruction,"IFEQ",tf.stringType(),"label");
  private static final Type _Instruction_INSTANCEOF_1 
    = tf.constructor(typestore,_Instruction,"INSTANCEOF",_Type,"type");
  private static final Type _Instruction_JSR_1 
    = tf.constructor(typestore,_Instruction,"JSR",tf.stringType(),"label");
  private static final Type _Instruction_AASTORE_0 
    = tf.constructor(typestore,_Instruction,"AASTORE");
  private static final Type _Instruction_POP2_0 
    = tf.constructor(typestore,_Instruction,"POP2");
  private static final Type _Instruction_FALOAD_0 
    = tf.constructor(typestore,_Instruction,"FALOAD");
  private static final Type _Instruction_FCONST_0_0 
    = tf.constructor(typestore,_Instruction,"FCONST_0");
  private static final Type _Instruction_ISHL_0 
    = tf.constructor(typestore,_Instruction,"ISHL");
  private static final Type _Instruction_ALOAD_1 
    = tf.constructor(typestore,_Instruction,"ALOAD",tf.integerType(),"var");
  private static final Type _Instruction_ICONST_3_0 
    = tf.constructor(typestore,_Instruction,"ICONST_3");
  private static final Type _Instruction_LREM_0 
    = tf.constructor(typestore,_Instruction,"LREM");
  private static final Type _Instruction_IAND_0 
    = tf.constructor(typestore,_Instruction,"IAND");
  private static final Type _Instruction_TRYCATCH_4 
    = tf.constructor(typestore,_Instruction,"TRYCATCH",_Type,"type",tf.stringType(),"start",tf.stringType(),"end",tf.stringType(),"handler");
  private static final Type _Instruction_IF_ICMPLT_1 
    = tf.constructor(typestore,_Instruction,"IF_ICMPLT",tf.stringType(),"label");
  private static final Type _Instruction_NOP_0 
    = tf.constructor(typestore,_Instruction,"NOP");
  private static final Type _Instruction_ICONST_4_0 
    = tf.constructor(typestore,_Instruction,"ICONST_4");
  private static final Type _Instruction_LXOR_0 
    = tf.constructor(typestore,_Instruction,"LXOR");
  private static final Type _Instruction_LOR_0 
    = tf.constructor(typestore,_Instruction,"LOR");
  private static final Type _Instruction_FCONST_1_0 
    = tf.constructor(typestore,_Instruction,"FCONST_1");
  private static final Type _Instruction_IOR_0 
    = tf.constructor(typestore,_Instruction,"IOR");
  private static final Type _Instruction_DNEG_0 
    = tf.constructor(typestore,_Instruction,"DNEG");
  private static final Type _Instruction_FCMPL_0 
    = tf.constructor(typestore,_Instruction,"FCMPL");
  private static final Type _Instruction_PUTFIELD_3 
    = tf.constructor(typestore,_Instruction,"PUTFIELD",_Type,"class",tf.stringType(),"name",_Type,"type");
  private static final Type _Instruction_LASTORE_0 
    = tf.constructor(typestore,_Instruction,"LASTORE");
  private static final Type _Instruction_IFNULL_1 
    = tf.constructor(typestore,_Instruction,"IFNULL",tf.stringType(),"label");
  private static final Type _Instruction_ICONST_1_0 
    = tf.constructor(typestore,_Instruction,"ICONST_1");
  private static final Type _Instruction_NEW_1 
    = tf.constructor(typestore,_Instruction,"NEW",_Type,"type");
  private static final Type _Instruction_INVOKESPECIAL_3 
    = tf.constructor(typestore,_Instruction,"INVOKESPECIAL",_Type,"class",_Signature,"desc",tf.boolType(),"isInterface");
  private static final Type _Instruction_IFLT_1 
    = tf.constructor(typestore,_Instruction,"IFLT",tf.stringType(),"label");
  private static final Type _Instruction_INVOKEINTERFACE_3 
    = tf.constructor(typestore,_Instruction,"INVOKEINTERFACE",_Type,"class",_Signature,"desc",tf.boolType(),"isInterface");
  private static final Type _Instruction_DDIV_0 
    = tf.constructor(typestore,_Instruction,"DDIV");
  private static final Type _Instruction_ICONST_2_0 
    = tf.constructor(typestore,_Instruction,"ICONST_2");
  private static final Type _Instruction_FNEG_0 
    = tf.constructor(typestore,_Instruction,"FNEG");
  private static final Type _Instruction_INVOKESTATIC_3 
    = tf.constructor(typestore,_Instruction,"INVOKESTATIC",_Type,"class",_Signature,"desc",tf.boolType(),"isInterface");
  private static final Type _Instruction_DCMPL_0 
    = tf.constructor(typestore,_Instruction,"DCMPL");
  private static final Type _Instruction_CHECKCAST_1 
    = tf.constructor(typestore,_Instruction,"CHECKCAST",_Type,"type");
  private static final Type _Instruction_I2S_0 
    = tf.constructor(typestore,_Instruction,"I2S");
  private static final Type _Instruction_LINENUMBER_2 
    = tf.constructor(typestore,_Instruction,"LINENUMBER",tf.integerType(),"line",tf.stringType(),"label");
  private static final Type _Instruction_FDIV_0 
    = tf.constructor(typestore,_Instruction,"FDIV");
  private static final Type _Instruction_ICONST_0_0 
    = tf.constructor(typestore,_Instruction,"ICONST_0");
  private static final Type _Instruction_LAND_0 
    = tf.constructor(typestore,_Instruction,"LAND");
  private static final Type _Instruction_GOTO_1 
    = tf.constructor(typestore,_Instruction,"GOTO",tf.stringType(),"label");
  private static final Type _Instruction_LSHL_0 
    = tf.constructor(typestore,_Instruction,"LSHL");
  private static final Type _Instruction_IDIV_0 
    = tf.constructor(typestore,_Instruction,"IDIV");
  private static final Type _Instruction_IINC_2 
    = tf.constructor(typestore,_Instruction,"IINC",tf.integerType(),"var",tf.integerType(),"inc");
  private static final Type _Instruction_RET_1 
    = tf.constructor(typestore,_Instruction,"RET",tf.integerType(),"var");
  private static final Type _Instruction_BIPUSH_1 
    = tf.constructor(typestore,_Instruction,"BIPUSH",tf.integerType(),"val");
  private static final Type _Instruction_LCONST_0_0 
    = tf.constructor(typestore,_Instruction,"LCONST_0");
  private static final Type _Instruction_ICONST_M1_0 
    = tf.constructor(typestore,_Instruction,"ICONST_M1");
  private static final Type _Instruction_ASTORE_1 
    = tf.constructor(typestore,_Instruction,"ASTORE",tf.integerType(),"var");
  private static final Type _Instruction_IASTORE_0 
    = tf.constructor(typestore,_Instruction,"IASTORE");
  private static final Type _Instruction_LCONST_1_0 
    = tf.constructor(typestore,_Instruction,"LCONST_1");
  
  
  private static final Type _Modifier_abstract_0 
    = tf.constructor(typestore,_Modifier,"abstract");
  private static final Type _Modifier_private_0 
    = tf.constructor(typestore,_Modifier,"private");
  private static final Type _Modifier_friendly_0 
    = tf.constructor(typestore,_Modifier,"friendly");
  private static final Type _Modifier_public_0 
    = tf.constructor(typestore,_Modifier,"public");
  private static final Type _Modifier_final_0 
    = tf.constructor(typestore,_Modifier,"final");
  private static final Type _Modifier_synchronized_0 
    = tf.constructor(typestore,_Modifier,"synchronized");
  private static final Type _Modifier_static_0 
    = tf.constructor(typestore,_Modifier,"static");
  private static final Type _Modifier_protected_0 
    = tf.constructor(typestore,_Modifier,"protected");
  
  
  private static final Type _RetentionPolicy_source_0 
    = tf.constructor(typestore,_RetentionPolicy,"source");
  private static final Type _RetentionPolicy_class_0 
    = tf.constructor(typestore,_RetentionPolicy,"class");
  private static final Type _RetentionPolicy_runtime_0 
    = tf.constructor(typestore,_RetentionPolicy,"runtime");
  
  
  private static final Type _Signature_methodDesc_3 
    = tf.constructor(typestore,_Signature,"methodDesc",_Type,"return",tf.stringType(),"name",tf.listType(_Type),"formals");
  private static final Type _Signature_constructorDesc_1 
    = tf.constructor(typestore,_Signature,"constructorDesc",tf.listType(_Type),"formals");
  
  
  private static final Type _Stat_asm_1 
    = tf.constructor(typestore,_Stat,"asm",tf.listType(_Instruction),"instructions");
  private static final Type _Stat_do_1 
    = tf.constructor(typestore,_Stat,"do",_Exp,"exp");
  private static final Type _Stat_if_2 
    = tf.constructor(typestore,_Stat,"if",_Exp,"condition",tf.listType(_Stat),"thenBlock");
  private static final Type _Stat_try_2 
    = tf.constructor(typestore,_Stat,"try",tf.listType(_Stat),"block",tf.listType(_Handler),"catch");
  private static final Type _Stat_store_2 
    = tf.constructor(typestore,_Stat,"store",tf.stringType(),"name",_Exp,"value");
  private static final Type _Stat_if_3 
    = tf.constructor(typestore,_Stat,"if",_Exp,"condition",tf.listType(_Stat),"thenBlock",tf.listType(_Stat),"elseBlock");
  private static final Type _Stat_doWhile_2 
    = tf.constructor(typestore,_Stat,"doWhile",tf.listType(_Stat),"block",_Exp,"condition");
  private static final Type _Stat_throw_1 
    = tf.constructor(typestore,_Stat,"throw",_Exp,"arg");
  private static final Type _Stat_invokeSuper_2 
    = tf.constructor(typestore,_Stat,"invokeSuper",_Signature,"desc",tf.listType(_Exp),"args");
  private static final Type _Stat_continue_0 
    = tf.constructor(typestore,_Stat,"continue");
  private static final Type _Stat_for_4 
    = tf.constructor(typestore,_Stat,"for",tf.listType(_Stat),"init",_Exp,"condition",tf.listType(_Stat),"next",tf.listType(_Stat),"statements");
  private static final Type _Stat_while_2 
    = tf.constructor(typestore,_Stat,"while",_Exp,"condition",tf.listType(_Stat),"block");
  private static final Type _Stat_monitor_2 
    = tf.constructor(typestore,_Stat,"monitor",_Exp,"arg",tf.listType(_Stat),"block");
  private static final Type _Stat_return_0 
    = tf.constructor(typestore,_Stat,"return");
  private static final Type _Stat_decl_2 
    = tf.constructor(typestore,_Stat,"decl",_Type,"type",tf.stringType(),"name");
  private static final Type _Stat_acquire_1 
    = tf.constructor(typestore,_Stat,"acquire",_Exp,"arg");
  private static final Type _Stat_break_0 
    = tf.constructor(typestore,_Stat,"break");
  private static final Type _Stat_putField_5 
    = tf.constructor(typestore,_Stat,"putField",_Type,"class",_Exp,"receiver",_Type,"type",tf.stringType(),"name",_Exp,"arg");
  private static final Type _Stat_release_1 
    = tf.constructor(typestore,_Stat,"release",_Exp,"arg");
  private static final Type _Stat_astore_3 
    = tf.constructor(typestore,_Stat,"astore",_Exp,"array",_Exp,"index",_Exp,"arg");
  private static final Type _Stat_switch_2 
    = tf.constructor(typestore,_Stat,"switch",_Exp,"arg",tf.listType(_Case),"cases");
  private static final Type _Stat_putStatic_4 
    = tf.constructor(typestore,_Stat,"putStatic",_Type,"class",tf.stringType(),"name",_Type,"type",_Exp,"arg");
  private static final Type _Stat_return_1 
    = tf.constructor(typestore,_Stat,"return",_Exp,"arg");
  private static final Type _Stat_block_1 
    = tf.constructor(typestore,_Stat,"block",tf.listType(_Stat),"block");
  
  
  private static final Type _SwitchOption_lookup_0 
    = tf.constructor(typestore,_SwitchOption,"lookup");
  private static final Type _SwitchOption_table_0 
    = tf.constructor(typestore,_SwitchOption,"table");
  private static final Type _SwitchOption_auto_0 
    = tf.constructor(typestore,_SwitchOption,"auto");
  
  
  private static final Type _Type_character_0 
    = tf.constructor(typestore,_Type,"character");
  private static final Type _Type_array_1 
    = tf.constructor(typestore,_Type,"array",_Type,"arg");
  private static final Type _Type_integer_0 
    = tf.constructor(typestore,_Type,"integer");
  private static final Type _Type_byte_0 
    = tf.constructor(typestore,_Type,"byte");
  private static final Type _Type_boolean_0 
    = tf.constructor(typestore,_Type,"boolean");
  private static final Type _Type_long_0 
    = tf.constructor(typestore,_Type,"long");
  private static final Type _Type_float_0 
    = tf.constructor(typestore,_Type,"float");
  private static final Type _Type_short_0 
    = tf.constructor(typestore,_Type,"short");
  private static final Type _Type_object_1 
    = tf.constructor(typestore,_Type,"object",tf.stringType(),"name");
  private static final Type _Type_void_0 
    = tf.constructor(typestore,_Type,"void");
  private static final Type _Type_double_0 
    = tf.constructor(typestore,_Type,"double");
  private static final Type _Type_string_0 
    = tf.constructor(typestore,_Type,"string");
  
   
  
  public IConstructor Class_interface(IConstructor $type) {
      
    if (!$type.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $type.getType() + " for $type:" + $type);
    }
    
    return vf.constructor(_Class_interface_1 , $type);
  }
  
  public IConstructor Class_class(IConstructor $type) {
      
    if (!$type.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $type.getType() + " for $type:" + $type);
    }
    
    return vf.constructor(_Class_class_1 , $type);
  }
  
  
  public IConstructor Field_field(IConstructor $type, String $name) {
      
    if (!$type.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $type.getType() + " for $type:" + $type);
    }
      
    if (!vf.string($name).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($name).getType() + " for vf.string($name):" + vf.string($name));
    }
    
    return vf.constructor(_Field_field_2 , $type, vf.string($name));
  }
  
  
  public IConstructor Method_static(IList $block) {
      
    if (!$block.getType().isSubtypeOf(tf.listType(_Stat))) {
      throw new IllegalArgumentException("Expected " + tf.listType(_Stat) + " but got " + $block.getType() + " for $block:" + $block);
    }
    
    return vf.constructor(_Method_static_1 , $block);
  }
  
  public IConstructor Method_method(IConstructor $desc) {
      
    if (!$desc.getType().isSubtypeOf(_Signature)) {
      throw new IllegalArgumentException("Expected " + _Signature + " but got " + $desc.getType() + " for $desc:" + $desc);
    }
    
    return vf.constructor(_Method_method_1 , $desc);
  }
  
  public IConstructor Method_method(IConstructor $desc, IList $formals, IList $block) {
      
    if (!$desc.getType().isSubtypeOf(_Signature)) {
      throw new IllegalArgumentException("Expected " + _Signature + " but got " + $desc.getType() + " for $desc:" + $desc);
    }
      
    if (!$formals.getType().isSubtypeOf(tf.listType(_Formal))) {
      throw new IllegalArgumentException("Expected " + tf.listType(_Formal) + " but got " + $formals.getType() + " for $formals:" + $formals);
    }
      
    if (!$block.getType().isSubtypeOf(tf.listType(_Stat))) {
      throw new IllegalArgumentException("Expected " + tf.listType(_Stat) + " but got " + $block.getType() + " for $block:" + $block);
    }
    
    return vf.constructor(_Method_method_3 , $desc, $formals, $block);
  }
  
  public IConstructor Method_procedure(IConstructor $desc, IList $formals, IList $instructions) {
      
    if (!$desc.getType().isSubtypeOf(_Signature)) {
      throw new IllegalArgumentException("Expected " + _Signature + " but got " + $desc.getType() + " for $desc:" + $desc);
    }
      
    if (!$formals.getType().isSubtypeOf(tf.listType(_Formal))) {
      throw new IllegalArgumentException("Expected " + tf.listType(_Formal) + " but got " + $formals.getType() + " for $formals:" + $formals);
    }
      
    if (!$instructions.getType().isSubtypeOf(tf.listType(_Instruction))) {
      throw new IllegalArgumentException("Expected " + tf.listType(_Instruction) + " but got " + $instructions.getType() + " for $instructions:" + $instructions);
    }
    
    return vf.constructor(_Method_procedure_3 , $desc, $formals, $instructions);
  }
  
  
  public IConstructor Annotation_anno(String $annoClass, IConstructor $type, IValue $val) {
      
    if (!vf.string($annoClass).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($annoClass).getType() + " for vf.string($annoClass):" + vf.string($annoClass));
    }
      
    if (!$type.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $type.getType() + " for $type:" + $type);
    }
      
    if (!$val.getType().isSubtypeOf(tf.valueType())) {
      throw new IllegalArgumentException("Expected " + tf.valueType() + " but got " + $val.getType() + " for $val:" + $val);
    }
    
    return vf.constructor(_Annotation_anno_3 , vf.string($annoClass), $type, $val);
  }
  
  public IConstructor Annotation_tag(String $annoClass) {
      
    if (!vf.string($annoClass).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($annoClass).getType() + " for vf.string($annoClass):" + vf.string($annoClass));
    }
    
    return vf.constructor(_Annotation_tag_1 , vf.string($annoClass));
  }
  
  
  public IConstructor BootstrapCall_bootstrap(IConstructor $class, IConstructor $desc, IList $args) {
      
    if (!$class.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $class.getType() + " for $class:" + $class);
    }
      
    if (!$desc.getType().isSubtypeOf(_Signature)) {
      throw new IllegalArgumentException("Expected " + _Signature + " but got " + $desc.getType() + " for $desc:" + $desc);
    }
      
    if (!$args.getType().isSubtypeOf(tf.listType(_CallSiteInfo))) {
      throw new IllegalArgumentException("Expected " + tf.listType(_CallSiteInfo) + " but got " + $args.getType() + " for $args:" + $args);
    }
    
    return vf.constructor(_BootstrapCall_bootstrap_3 , $class, $desc, $args);
  }
  
  
  public IConstructor CallSiteInfo_integerInfo(int $i) {
      
    if (!vf.integer($i).getType().isSubtypeOf(tf.integerType())) {
      throw new IllegalArgumentException("Expected " + tf.integerType() + " but got " + vf.integer($i).getType() + " for vf.integer($i):" + vf.integer($i));
    }
    
    return vf.constructor(_CallSiteInfo_integerInfo_1 , vf.integer($i));
  }
  
  public IConstructor CallSiteInfo_longInfo(long $l) {
      
    if (!vf.integer($l).getType().isSubtypeOf(tf.integerType())) {
      throw new IllegalArgumentException("Expected " + tf.integerType() + " but got " + vf.integer($l).getType() + " for vf.integer($l):" + vf.integer($l));
    }
    
    return vf.constructor(_CallSiteInfo_longInfo_1 , vf.integer($l));
  }
  
  public IConstructor CallSiteInfo_doubleInfo(double $d) {
      
    if (!vf.real($d).getType().isSubtypeOf(tf.realType())) {
      throw new IllegalArgumentException("Expected " + tf.realType() + " but got " + vf.real($d).getType() + " for vf.real($d):" + vf.real($d));
    }
    
    return vf.constructor(_CallSiteInfo_doubleInfo_1 , vf.real($d));
  }
  
  public IConstructor CallSiteInfo_getterHandle(IConstructor $class, String $name, IConstructor $type) {
      
    if (!$class.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $class.getType() + " for $class:" + $class);
    }
      
    if (!vf.string($name).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($name).getType() + " for vf.string($name):" + vf.string($name));
    }
      
    if (!$type.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $type.getType() + " for $type:" + $type);
    }
    
    return vf.constructor(_CallSiteInfo_getterHandle_3 , $class, vf.string($name), $type);
  }
  
  public IConstructor CallSiteInfo_virtualHandle(IConstructor $class, String $name, IConstructor $desc) {
      
    if (!$class.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $class.getType() + " for $class:" + $class);
    }
      
    if (!vf.string($name).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($name).getType() + " for vf.string($name):" + vf.string($name));
    }
      
    if (!$desc.getType().isSubtypeOf(_Signature)) {
      throw new IllegalArgumentException("Expected " + _Signature + " but got " + $desc.getType() + " for $desc:" + $desc);
    }
    
    return vf.constructor(_CallSiteInfo_virtualHandle_3 , $class, vf.string($name), $desc);
  }
  
  public IConstructor CallSiteInfo_classInfo(String $name) {
      
    if (!vf.string($name).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($name).getType() + " for vf.string($name):" + vf.string($name));
    }
    
    return vf.constructor(_CallSiteInfo_classInfo_1 , vf.string($name));
  }
  
  public IConstructor CallSiteInfo_floatInfo(double $f) {
      
    if (!vf.real($f).getType().isSubtypeOf(tf.realType())) {
      throw new IllegalArgumentException("Expected " + tf.realType() + " but got " + vf.real($f).getType() + " for vf.real($f):" + vf.real($f));
    }
    
    return vf.constructor(_CallSiteInfo_floatInfo_1 , vf.real($f));
  }
  
  public IConstructor CallSiteInfo_staticGetterHandle(IConstructor $class, String $name, IConstructor $type) {
      
    if (!$class.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $class.getType() + " for $class:" + $class);
    }
      
    if (!vf.string($name).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($name).getType() + " for vf.string($name):" + vf.string($name));
    }
      
    if (!$type.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $type.getType() + " for $type:" + $type);
    }
    
    return vf.constructor(_CallSiteInfo_staticGetterHandle_3 , $class, vf.string($name), $type);
  }
  
  public IConstructor CallSiteInfo_methodTypeInfo(IConstructor $desc) {
      
    if (!$desc.getType().isSubtypeOf(_Signature)) {
      throw new IllegalArgumentException("Expected " + _Signature + " but got " + $desc.getType() + " for $desc:" + $desc);
    }
    
    return vf.constructor(_CallSiteInfo_methodTypeInfo_1 , $desc);
  }
  
  public IConstructor CallSiteInfo_stringInfo(String $s) {
      
    if (!vf.string($s).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($s).getType() + " for vf.string($s):" + vf.string($s));
    }
    
    return vf.constructor(_CallSiteInfo_stringInfo_1 , vf.string($s));
  }
  
  public IConstructor CallSiteInfo_staticSetterHandle(IConstructor $class, String $name, IConstructor $type) {
      
    if (!$class.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $class.getType() + " for $class:" + $class);
    }
      
    if (!vf.string($name).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($name).getType() + " for vf.string($name):" + vf.string($name));
    }
      
    if (!$type.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $type.getType() + " for $type:" + $type);
    }
    
    return vf.constructor(_CallSiteInfo_staticSetterHandle_3 , $class, vf.string($name), $type);
  }
  
  public IConstructor CallSiteInfo_constructorHandle(IConstructor $class, IConstructor $desc) {
      
    if (!$class.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $class.getType() + " for $class:" + $class);
    }
      
    if (!$desc.getType().isSubtypeOf(_Signature)) {
      throw new IllegalArgumentException("Expected " + _Signature + " but got " + $desc.getType() + " for $desc:" + $desc);
    }
    
    return vf.constructor(_CallSiteInfo_constructorHandle_2 , $class, $desc);
  }
  
  public IConstructor CallSiteInfo_specialHandle(IConstructor $class, String $name, IConstructor $desc, IConstructor $caller) {
      
    if (!$class.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $class.getType() + " for $class:" + $class);
    }
      
    if (!vf.string($name).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($name).getType() + " for vf.string($name):" + vf.string($name));
    }
      
    if (!$desc.getType().isSubtypeOf(_Signature)) {
      throw new IllegalArgumentException("Expected " + _Signature + " but got " + $desc.getType() + " for $desc:" + $desc);
    }
      
    if (!$caller.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $caller.getType() + " for $caller:" + $caller);
    }
    
    return vf.constructor(_CallSiteInfo_specialHandle_4 , $class, vf.string($name), $desc, $caller);
  }
  
  public IConstructor CallSiteInfo_setterHandle(IConstructor $class, String $name, IConstructor $type) {
      
    if (!$class.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $class.getType() + " for $class:" + $class);
    }
      
    if (!vf.string($name).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($name).getType() + " for vf.string($name):" + vf.string($name));
    }
      
    if (!$type.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $type.getType() + " for $type:" + $type);
    }
    
    return vf.constructor(_CallSiteInfo_setterHandle_3 , $class, vf.string($name), $type);
  }
  
  
  public IConstructor Case_default(IList $block) {
      
    if (!$block.getType().isSubtypeOf(tf.listType(_Stat))) {
      throw new IllegalArgumentException("Expected " + tf.listType(_Stat) + " but got " + $block.getType() + " for $block:" + $block);
    }
    
    return vf.constructor(_Case_default_1 , $block);
  }
  
  public IConstructor Case_case(int $key, IList $block) {
      
    if (!vf.integer($key).getType().isSubtypeOf(tf.integerType())) {
      throw new IllegalArgumentException("Expected " + tf.integerType() + " but got " + vf.integer($key).getType() + " for vf.integer($key):" + vf.integer($key));
    }
      
    if (!$block.getType().isSubtypeOf(tf.listType(_Stat))) {
      throw new IllegalArgumentException("Expected " + tf.listType(_Stat) + " but got " + $block.getType() + " for $block:" + $block);
    }
    
    return vf.constructor(_Case_case_2 , vf.integer($key), $block);
  }
  
  
  public IConstructor Exp_instanceof(IConstructor $arg, IConstructor $class) {
      
    if (!$arg.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $arg.getType() + " for $arg:" + $arg);
    }
      
    if (!$class.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $class.getType() + " for $class:" + $class);
    }
    
    return vf.constructor(_Exp_instanceof_2 , $arg, $class);
  }
  
  public IConstructor Exp_eq(IConstructor $lhs, IConstructor $rhs) {
      
    if (!$lhs.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $lhs.getType() + " for $lhs:" + $lhs);
    }
      
    if (!$rhs.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $rhs.getType() + " for $rhs:" + $rhs);
    }
    
    return vf.constructor(_Exp_eq_2 , $lhs, $rhs);
  }
  
  public IConstructor Exp_lt(IConstructor $lhs, IConstructor $rhs) {
      
    if (!$lhs.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $lhs.getType() + " for $lhs:" + $lhs);
    }
      
    if (!$rhs.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $rhs.getType() + " for $rhs:" + $rhs);
    }
    
    return vf.constructor(_Exp_lt_2 , $lhs, $rhs);
  }
  
  public IConstructor Exp_ushr(IConstructor $lhs, IConstructor $shift) {
      
    if (!$lhs.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $lhs.getType() + " for $lhs:" + $lhs);
    }
      
    if (!$shift.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $shift.getType() + " for $shift:" + $shift);
    }
    
    return vf.constructor(_Exp_ushr_2 , $lhs, $shift);
  }
  
  public IConstructor Exp_alength(IConstructor $arg) {
      
    if (!$arg.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $arg.getType() + " for $arg:" + $arg);
    }
    
    return vf.constructor(_Exp_alength_1 , $arg);
  }
  
  public IConstructor Exp_shl(IConstructor $lhs, IConstructor $shift) {
      
    if (!$lhs.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $lhs.getType() + " for $lhs:" + $lhs);
    }
      
    if (!$shift.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $shift.getType() + " for $shift:" + $shift);
    }
    
    return vf.constructor(_Exp_shl_2 , $lhs, $shift);
  }
  
  public IConstructor Exp_div(IConstructor $lhs, IConstructor $rhs) {
      
    if (!$lhs.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $lhs.getType() + " for $lhs:" + $lhs);
    }
      
    if (!$rhs.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $rhs.getType() + " for $rhs:" + $rhs);
    }
    
    return vf.constructor(_Exp_div_2 , $lhs, $rhs);
  }
  
  public IConstructor Exp_false() {
    
    return vf.constructor(_Exp_false_0 );
  }
  
  public IConstructor Exp_checkcast(IConstructor $arg, IConstructor $type) {
      
    if (!$arg.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $arg.getType() + " for $arg:" + $arg);
    }
      
    if (!$type.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $type.getType() + " for $type:" + $type);
    }
    
    return vf.constructor(_Exp_checkcast_2 , $arg, $type);
  }
  
  public IConstructor Exp_xor(IConstructor $lhs, IConstructor $rhs) {
      
    if (!$lhs.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $lhs.getType() + " for $lhs:" + $lhs);
    }
      
    if (!$rhs.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $rhs.getType() + " for $rhs:" + $rhs);
    }
    
    return vf.constructor(_Exp_xor_2 , $lhs, $rhs);
  }
  
  public IConstructor Exp_mul(IConstructor $lhs, IConstructor $rhs) {
      
    if (!$lhs.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $lhs.getType() + " for $lhs:" + $lhs);
    }
      
    if (!$rhs.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $rhs.getType() + " for $rhs:" + $rhs);
    }
    
    return vf.constructor(_Exp_mul_2 , $lhs, $rhs);
  }
  
  public IConstructor Exp_sand(IConstructor $lhs, IConstructor $rhs) {
      
    if (!$lhs.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $lhs.getType() + " for $lhs:" + $lhs);
    }
      
    if (!$rhs.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $rhs.getType() + " for $rhs:" + $rhs);
    }
    
    return vf.constructor(_Exp_sand_2 , $lhs, $rhs);
  }
  
  public IConstructor Exp_aload(IConstructor $array, IConstructor $index) {
      
    if (!$array.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $array.getType() + " for $array:" + $array);
    }
      
    if (!$index.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $index.getType() + " for $index:" + $index);
    }
    
    return vf.constructor(_Exp_aload_2 , $array, $index);
  }
  
  public IConstructor Exp_add(IConstructor $lhs, IConstructor $rhs) {
      
    if (!$lhs.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $lhs.getType() + " for $lhs:" + $lhs);
    }
      
    if (!$rhs.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $rhs.getType() + " for $rhs:" + $rhs);
    }
    
    return vf.constructor(_Exp_add_2 , $lhs, $rhs);
  }
  
  public IConstructor Exp_coerce(IConstructor $from, IConstructor $to, IConstructor $arg) {
      
    if (!$from.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $from.getType() + " for $from:" + $from);
    }
      
    if (!$to.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $to.getType() + " for $to:" + $to);
    }
      
    if (!$arg.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $arg.getType() + " for $arg:" + $arg);
    }
    
    return vf.constructor(_Exp_coerce_3 , $from, $to, $arg);
  }
  
  public IConstructor Exp_sub(IConstructor $lhs, IConstructor $rhs) {
      
    if (!$lhs.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $lhs.getType() + " for $lhs:" + $lhs);
    }
      
    if (!$rhs.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $rhs.getType() + " for $rhs:" + $rhs);
    }
    
    return vf.constructor(_Exp_sub_2 , $lhs, $rhs);
  }
  
  public IConstructor Exp_getField(IConstructor $class, IConstructor $receiver, IConstructor $type, String $name) {
      
    if (!$class.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $class.getType() + " for $class:" + $class);
    }
      
    if (!$receiver.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $receiver.getType() + " for $receiver:" + $receiver);
    }
      
    if (!$type.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $type.getType() + " for $type:" + $type);
    }
      
    if (!vf.string($name).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($name).getType() + " for vf.string($name):" + vf.string($name));
    }
    
    return vf.constructor(_Exp_getField_4 , $class, $receiver, $type, vf.string($name));
  }
  
  public IConstructor Exp_invokeDynamic(IConstructor $handle, IConstructor $desc, IList $args) {
      
    if (!$handle.getType().isSubtypeOf(_BootstrapCall)) {
      throw new IllegalArgumentException("Expected " + _BootstrapCall + " but got " + $handle.getType() + " for $handle:" + $handle);
    }
      
    if (!$desc.getType().isSubtypeOf(_Signature)) {
      throw new IllegalArgumentException("Expected " + _Signature + " but got " + $desc.getType() + " for $desc:" + $desc);
    }
      
    if (!$args.getType().isSubtypeOf(tf.listType(_Exp))) {
      throw new IllegalArgumentException("Expected " + tf.listType(_Exp) + " but got " + $args.getType() + " for $args:" + $args);
    }
    
    return vf.constructor(_Exp_invokeDynamic_3 , $handle, $desc, $args);
  }
  
  public IConstructor Exp_newArray(IConstructor $type, IConstructor $size) {
      
    if (!$type.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $type.getType() + " for $type:" + $type);
    }
      
    if (!$size.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $size.getType() + " for $size:" + $size);
    }
    
    return vf.constructor(_Exp_newArray_2 , $type, $size);
  }
  
  public IConstructor Exp_or(IConstructor $lhs, IConstructor $rhs) {
      
    if (!$lhs.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $lhs.getType() + " for $lhs:" + $lhs);
    }
      
    if (!$rhs.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $rhs.getType() + " for $rhs:" + $rhs);
    }
    
    return vf.constructor(_Exp_or_2 , $lhs, $rhs);
  }
  
  public IConstructor Exp_neg(IConstructor $arg) {
      
    if (!$arg.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $arg.getType() + " for $arg:" + $arg);
    }
    
    return vf.constructor(_Exp_neg_1 , $arg);
  }
  
  public IConstructor Exp_invokeVirtual(IConstructor $class, IConstructor $receiver, IConstructor $desc, IList $args) {
      
    if (!$class.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $class.getType() + " for $class:" + $class);
    }
      
    if (!$receiver.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $receiver.getType() + " for $receiver:" + $receiver);
    }
      
    if (!$desc.getType().isSubtypeOf(_Signature)) {
      throw new IllegalArgumentException("Expected " + _Signature + " but got " + $desc.getType() + " for $desc:" + $desc);
    }
      
    if (!$args.getType().isSubtypeOf(tf.listType(_Exp))) {
      throw new IllegalArgumentException("Expected " + tf.listType(_Exp) + " but got " + $args.getType() + " for $args:" + $args);
    }
    
    return vf.constructor(_Exp_invokeVirtual_4 , $class, $receiver, $desc, $args);
  }
  
  public IConstructor Exp_gt(IConstructor $lhs, IConstructor $rhs) {
      
    if (!$lhs.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $lhs.getType() + " for $lhs:" + $lhs);
    }
      
    if (!$rhs.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $rhs.getType() + " for $rhs:" + $rhs);
    }
    
    return vf.constructor(_Exp_gt_2 , $lhs, $rhs);
  }
  
  public IConstructor Exp_sblock(IList $statements, IConstructor $arg) {
      
    if (!$statements.getType().isSubtypeOf(tf.listType(_Stat))) {
      throw new IllegalArgumentException("Expected " + tf.listType(_Stat) + " but got " + $statements.getType() + " for $statements:" + $statements);
    }
      
    if (!$arg.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $arg.getType() + " for $arg:" + $arg);
    }
    
    return vf.constructor(_Exp_sblock_2 , $statements, $arg);
  }
  
  public IConstructor Exp_const(IConstructor $type, IValue $constant) {
      
    if (!$type.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $type.getType() + " for $type:" + $type);
    }
      
    if (!$constant.getType().isSubtypeOf(tf.valueType())) {
      throw new IllegalArgumentException("Expected " + tf.valueType() + " but got " + $constant.getType() + " for $constant:" + $constant);
    }
    
    return vf.constructor(_Exp_const_2 , $type, $constant);
  }
  
  public IConstructor Exp_invokeStatic(IConstructor $class, IConstructor $desc, IList $args) {
      
    if (!$class.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $class.getType() + " for $class:" + $class);
    }
      
    if (!$desc.getType().isSubtypeOf(_Signature)) {
      throw new IllegalArgumentException("Expected " + _Signature + " but got " + $desc.getType() + " for $desc:" + $desc);
    }
      
    if (!$args.getType().isSubtypeOf(tf.listType(_Exp))) {
      throw new IllegalArgumentException("Expected " + tf.listType(_Exp) + " but got " + $args.getType() + " for $args:" + $args);
    }
    
    return vf.constructor(_Exp_invokeStatic_3 , $class, $desc, $args);
  }
  
  public IConstructor Exp_null() {
    
    return vf.constructor(_Exp_null_0 );
  }
  
  public IConstructor Exp_ne(IConstructor $lhs, IConstructor $rhs) {
      
    if (!$lhs.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $lhs.getType() + " for $lhs:" + $lhs);
    }
      
    if (!$rhs.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $rhs.getType() + " for $rhs:" + $rhs);
    }
    
    return vf.constructor(_Exp_ne_2 , $lhs, $rhs);
  }
  
  public IConstructor Exp_and(IConstructor $lhs, IConstructor $rhs) {
      
    if (!$lhs.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $lhs.getType() + " for $lhs:" + $lhs);
    }
      
    if (!$rhs.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $rhs.getType() + " for $rhs:" + $rhs);
    }
    
    return vf.constructor(_Exp_and_2 , $lhs, $rhs);
  }
  
  public IConstructor Exp_inc(String $name, int $inc) {
      
    if (!vf.string($name).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($name).getType() + " for vf.string($name):" + vf.string($name));
    }
      
    if (!vf.integer($inc).getType().isSubtypeOf(tf.integerType())) {
      throw new IllegalArgumentException("Expected " + tf.integerType() + " but got " + vf.integer($inc).getType() + " for vf.integer($inc):" + vf.integer($inc));
    }
    
    return vf.constructor(_Exp_inc_2 , vf.string($name), vf.integer($inc));
  }
  
  public IConstructor Exp_sor(IConstructor $lhs, IConstructor $rhs) {
      
    if (!$lhs.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $lhs.getType() + " for $lhs:" + $lhs);
    }
      
    if (!$rhs.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $rhs.getType() + " for $rhs:" + $rhs);
    }
    
    return vf.constructor(_Exp_sor_2 , $lhs, $rhs);
  }
  
  public IConstructor Exp_invokeSpecial(IConstructor $class, IConstructor $receiver, IConstructor $desc, IList $args) {
      
    if (!$class.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $class.getType() + " for $class:" + $class);
    }
      
    if (!$receiver.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $receiver.getType() + " for $receiver:" + $receiver);
    }
      
    if (!$desc.getType().isSubtypeOf(_Signature)) {
      throw new IllegalArgumentException("Expected " + _Signature + " but got " + $desc.getType() + " for $desc:" + $desc);
    }
      
    if (!$args.getType().isSubtypeOf(tf.listType(_Exp))) {
      throw new IllegalArgumentException("Expected " + tf.listType(_Exp) + " but got " + $args.getType() + " for $args:" + $args);
    }
    
    return vf.constructor(_Exp_invokeSpecial_4 , $class, $receiver, $desc, $args);
  }
  
  public IConstructor Exp_invokeInterface(IConstructor $class, IConstructor $receiver, IConstructor $desc, IList $args) {
      
    if (!$class.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $class.getType() + " for $class:" + $class);
    }
      
    if (!$receiver.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $receiver.getType() + " for $receiver:" + $receiver);
    }
      
    if (!$desc.getType().isSubtypeOf(_Signature)) {
      throw new IllegalArgumentException("Expected " + _Signature + " but got " + $desc.getType() + " for $desc:" + $desc);
    }
      
    if (!$args.getType().isSubtypeOf(tf.listType(_Exp))) {
      throw new IllegalArgumentException("Expected " + tf.listType(_Exp) + " but got " + $args.getType() + " for $args:" + $args);
    }
    
    return vf.constructor(_Exp_invokeInterface_4 , $class, $receiver, $desc, $args);
  }
  
  public IConstructor Exp_newInstance(IConstructor $class, IConstructor $desc, IList $args) {
      
    if (!$class.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $class.getType() + " for $class:" + $class);
    }
      
    if (!$desc.getType().isSubtypeOf(_Signature)) {
      throw new IllegalArgumentException("Expected " + _Signature + " but got " + $desc.getType() + " for $desc:" + $desc);
    }
      
    if (!$args.getType().isSubtypeOf(tf.listType(_Exp))) {
      throw new IllegalArgumentException("Expected " + tf.listType(_Exp) + " but got " + $args.getType() + " for $args:" + $args);
    }
    
    return vf.constructor(_Exp_newInstance_3 , $class, $desc, $args);
  }
  
  public IConstructor Exp_cond(IConstructor $condition, IConstructor $thenExp, IConstructor $elseExp) {
      
    if (!$condition.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $condition.getType() + " for $condition:" + $condition);
    }
      
    if (!$thenExp.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $thenExp.getType() + " for $thenExp:" + $thenExp);
    }
      
    if (!$elseExp.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $elseExp.getType() + " for $elseExp:" + $elseExp);
    }
    
    return vf.constructor(_Exp_cond_3 , $condition, $thenExp, $elseExp);
  }
  
  public IConstructor Exp_load(String $name) {
      
    if (!vf.string($name).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($name).getType() + " for vf.string($name):" + vf.string($name));
    }
    
    return vf.constructor(_Exp_load_1 , vf.string($name));
  }
  
  public IConstructor Exp_shr(IConstructor $lhs, IConstructor $shift) {
      
    if (!$lhs.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $lhs.getType() + " for $lhs:" + $lhs);
    }
      
    if (!$shift.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $shift.getType() + " for $shift:" + $shift);
    }
    
    return vf.constructor(_Exp_shr_2 , $lhs, $shift);
  }
  
  public IConstructor Exp_true() {
    
    return vf.constructor(_Exp_true_0 );
  }
  
  public IConstructor Exp_ge(IConstructor $lhs, IConstructor $rhs) {
      
    if (!$lhs.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $lhs.getType() + " for $lhs:" + $lhs);
    }
      
    if (!$rhs.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $rhs.getType() + " for $rhs:" + $rhs);
    }
    
    return vf.constructor(_Exp_ge_2 , $lhs, $rhs);
  }
  
  public IConstructor Exp_getStatic(IConstructor $class, IConstructor $type, String $name) {
      
    if (!$class.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $class.getType() + " for $class:" + $class);
    }
      
    if (!$type.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $type.getType() + " for $type:" + $type);
    }
      
    if (!vf.string($name).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($name).getType() + " for vf.string($name):" + vf.string($name));
    }
    
    return vf.constructor(_Exp_getStatic_3 , $class, $type, vf.string($name));
  }
  
  public IConstructor Exp_le(IConstructor $lhs, IConstructor $rhs) {
      
    if (!$lhs.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $lhs.getType() + " for $lhs:" + $lhs);
    }
      
    if (!$rhs.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $rhs.getType() + " for $rhs:" + $rhs);
    }
    
    return vf.constructor(_Exp_le_2 , $lhs, $rhs);
  }
  
  public IConstructor Exp_newInitArray(IConstructor $type, IList $args) {
      
    if (!$type.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $type.getType() + " for $type:" + $type);
    }
      
    if (!$args.getType().isSubtypeOf(tf.listType(_Exp))) {
      throw new IllegalArgumentException("Expected " + tf.listType(_Exp) + " but got " + $args.getType() + " for $args:" + $args);
    }
    
    return vf.constructor(_Exp_newInitArray_2 , $type, $args);
  }
  
  public IConstructor Exp_rem(IConstructor $lhs, IConstructor $rhs) {
      
    if (!$lhs.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $lhs.getType() + " for $lhs:" + $lhs);
    }
      
    if (!$rhs.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $rhs.getType() + " for $rhs:" + $rhs);
    }
    
    return vf.constructor(_Exp_rem_2 , $lhs, $rhs);
  }
  
  
  public IConstructor Formal_var(IConstructor $type, String $name) {
      
    if (!$type.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $type.getType() + " for $type:" + $type);
    }
      
    if (!vf.string($name).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($name).getType() + " for vf.string($name):" + vf.string($name));
    }
    
    return vf.constructor(_Formal_var_2 , $type, vf.string($name));
  }
  
  
  public IConstructor Handler_finally(IList $block) {
      
    if (!$block.getType().isSubtypeOf(tf.listType(_Stat))) {
      throw new IllegalArgumentException("Expected " + tf.listType(_Stat) + " but got " + $block.getType() + " for $block:" + $block);
    }
    
    return vf.constructor(_Handler_finally_1 , $block);
  }
  
  public IConstructor Handler_catch(IConstructor $type, String $name, IList $block) {
      
    if (!$type.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $type.getType() + " for $type:" + $type);
    }
      
    if (!vf.string($name).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($name).getType() + " for vf.string($name):" + vf.string($name));
    }
      
    if (!$block.getType().isSubtypeOf(tf.listType(_Stat))) {
      throw new IllegalArgumentException("Expected " + tf.listType(_Stat) + " but got " + $block.getType() + " for $block:" + $block);
    }
    
    return vf.constructor(_Handler_catch_3 , $type, vf.string($name), $block);
  }
  
  
  public IConstructor Instruction_LDC(IConstructor $type, IValue $constant) {
      
    if (!$type.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $type.getType() + " for $type:" + $type);
    }
      
    if (!$constant.getType().isSubtypeOf(tf.valueType())) {
      throw new IllegalArgumentException("Expected " + tf.valueType() + " but got " + $constant.getType() + " for $constant:" + $constant);
    }
    
    return vf.constructor(_Instruction_LDC_2 , $type, $constant);
  }
  
  public IConstructor Instruction_IF_ACMPNE(String $label) {
      
    if (!vf.string($label).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($label).getType() + " for vf.string($label):" + vf.string($label));
    }
    
    return vf.constructor(_Instruction_IF_ACMPNE_1 , vf.string($label));
  }
  
  public IConstructor Instruction_FRETURN() {
    
    return vf.constructor(_Instruction_FRETURN_0 );
  }
  
  public IConstructor Instruction_DREM() {
    
    return vf.constructor(_Instruction_DREM_0 );
  }
  
  public IConstructor Instruction_exp(IConstructor $expression) {
      
    if (!$expression.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $expression.getType() + " for $expression:" + $expression);
    }
    
    return vf.constructor(_Instruction_exp_1 , $expression);
  }
  
  public IConstructor Instruction_ANEWARRAY(IConstructor $type) {
      
    if (!$type.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $type.getType() + " for $type:" + $type);
    }
    
    return vf.constructor(_Instruction_ANEWARRAY_1 , $type);
  }
  
  public IConstructor Instruction_ISUB() {
    
    return vf.constructor(_Instruction_ISUB_0 );
  }
  
  public IConstructor Instruction_ISHR() {
    
    return vf.constructor(_Instruction_ISHR_0 );
  }
  
  public IConstructor Instruction_LSUB() {
    
    return vf.constructor(_Instruction_LSUB_0 );
  }
  
  public IConstructor Instruction_MULTIANEWARRAY(IConstructor $type, int $numDimensions) {
      
    if (!$type.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $type.getType() + " for $type:" + $type);
    }
      
    if (!vf.integer($numDimensions).getType().isSubtypeOf(tf.integerType())) {
      throw new IllegalArgumentException("Expected " + tf.integerType() + " but got " + vf.integer($numDimensions).getType() + " for vf.integer($numDimensions):" + vf.integer($numDimensions));
    }
    
    return vf.constructor(_Instruction_MULTIANEWARRAY_2 , $type, vf.integer($numDimensions));
  }
  
  public IConstructor Instruction_SALOAD() {
    
    return vf.constructor(_Instruction_SALOAD_0 );
  }
  
  public IConstructor Instruction_DSTORE(int $var) {
      
    if (!vf.integer($var).getType().isSubtypeOf(tf.integerType())) {
      throw new IllegalArgumentException("Expected " + tf.integerType() + " but got " + vf.integer($var).getType() + " for vf.integer($var):" + vf.integer($var));
    }
    
    return vf.constructor(_Instruction_DSTORE_1 , vf.integer($var));
  }
  
  public IConstructor Instruction_FREM() {
    
    return vf.constructor(_Instruction_FREM_0 );
  }
  
  public IConstructor Instruction_LUSHR() {
    
    return vf.constructor(_Instruction_LUSHR_0 );
  }
  
  public IConstructor Instruction_DRETURN() {
    
    return vf.constructor(_Instruction_DRETURN_0 );
  }
  
  public IConstructor Instruction_IF_ICMPGE(String $label) {
      
    if (!vf.string($label).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($label).getType() + " for vf.string($label):" + vf.string($label));
    }
    
    return vf.constructor(_Instruction_IF_ICMPGE_1 , vf.string($label));
  }
  
  public IConstructor Instruction_LADD() {
    
    return vf.constructor(_Instruction_LADD_0 );
  }
  
  public IConstructor Instruction_IXOR() {
    
    return vf.constructor(_Instruction_IXOR_0 );
  }
  
  public IConstructor Instruction_FSTORE(int $var) {
      
    if (!vf.integer($var).getType().isSubtypeOf(tf.integerType())) {
      throw new IllegalArgumentException("Expected " + tf.integerType() + " but got " + vf.integer($var).getType() + " for vf.integer($var):" + vf.integer($var));
    }
    
    return vf.constructor(_Instruction_FSTORE_1 , vf.integer($var));
  }
  
  public IConstructor Instruction_LOCALVARIABLE(String $name, IConstructor $type, String $start, String $end, int $var) {
      
    if (!vf.string($name).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($name).getType() + " for vf.string($name):" + vf.string($name));
    }
      
    if (!$type.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $type.getType() + " for $type:" + $type);
    }
      
    if (!vf.string($start).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($start).getType() + " for vf.string($start):" + vf.string($start));
    }
      
    if (!vf.string($end).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($end).getType() + " for vf.string($end):" + vf.string($end));
    }
      
    if (!vf.integer($var).getType().isSubtypeOf(tf.integerType())) {
      throw new IllegalArgumentException("Expected " + tf.integerType() + " but got " + vf.integer($var).getType() + " for vf.integer($var):" + vf.integer($var));
    }
    
    return vf.constructor(_Instruction_LOCALVARIABLE_5 , vf.string($name), $type, vf.string($start), vf.string($end), vf.integer($var));
  }
  
  public IConstructor Instruction_SASTORE() {
    
    return vf.constructor(_Instruction_SASTORE_0 );
  }
  
  public IConstructor Instruction_IFGE(String $label) {
      
    if (!vf.string($label).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($label).getType() + " for vf.string($label):" + vf.string($label));
    }
    
    return vf.constructor(_Instruction_IFGE_1 , vf.string($label));
  }
  
  public IConstructor Instruction_DUP2() {
    
    return vf.constructor(_Instruction_DUP2_0 );
  }
  
  public IConstructor Instruction_SWAP() {
    
    return vf.constructor(_Instruction_SWAP_0 );
  }
  
  public IConstructor Instruction_FCONST_2() {
    
    return vf.constructor(_Instruction_FCONST_2_0 );
  }
  
  public IConstructor Instruction_IF_ICMPLE(String $label) {
      
    if (!vf.string($label).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($label).getType() + " for vf.string($label):" + vf.string($label));
    }
    
    return vf.constructor(_Instruction_IF_ICMPLE_1 , vf.string($label));
  }
  
  public IConstructor Instruction_RETURN() {
    
    return vf.constructor(_Instruction_RETURN_0 );
  }
  
  public IConstructor Instruction_DCONST_0() {
    
    return vf.constructor(_Instruction_DCONST_0_0 );
  }
  
  public IConstructor Instruction_ICONST_5() {
    
    return vf.constructor(_Instruction_ICONST_5_0 );
  }
  
  public IConstructor Instruction_IREM() {
    
    return vf.constructor(_Instruction_IREM_0 );
  }
  
  public IConstructor Instruction_IUSHR() {
    
    return vf.constructor(_Instruction_IUSHR_0 );
  }
  
  public IConstructor Instruction_POP() {
    
    return vf.constructor(_Instruction_POP_0 );
  }
  
  public IConstructor Instruction_DCONST_1() {
    
    return vf.constructor(_Instruction_DCONST_1_0 );
  }
  
  public IConstructor Instruction_LSHR() {
    
    return vf.constructor(_Instruction_LSHR_0 );
  }
  
  public IConstructor Instruction_ARETURN() {
    
    return vf.constructor(_Instruction_ARETURN_0 );
  }
  
  public IConstructor Instruction_ISTORE(int $var) {
      
    if (!vf.integer($var).getType().isSubtypeOf(tf.integerType())) {
      throw new IllegalArgumentException("Expected " + tf.integerType() + " but got " + vf.integer($var).getType() + " for vf.integer($var):" + vf.integer($var));
    }
    
    return vf.constructor(_Instruction_ISTORE_1 , vf.integer($var));
  }
  
  public IConstructor Instruction_L2D() {
    
    return vf.constructor(_Instruction_L2D_0 );
  }
  
  public IConstructor Instruction_IFLE(String $label) {
      
    if (!vf.string($label).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($label).getType() + " for vf.string($label):" + vf.string($label));
    }
    
    return vf.constructor(_Instruction_IFLE_1 , vf.string($label));
  }
  
  public IConstructor Instruction_INVOKEDYNAMIC(IConstructor $desc, IConstructor $handle) {
      
    if (!$desc.getType().isSubtypeOf(_Signature)) {
      throw new IllegalArgumentException("Expected " + _Signature + " but got " + $desc.getType() + " for $desc:" + $desc);
    }
      
    if (!$handle.getType().isSubtypeOf(_BootstrapCall)) {
      throw new IllegalArgumentException("Expected " + _BootstrapCall + " but got " + $handle.getType() + " for $handle:" + $handle);
    }
    
    return vf.constructor(_Instruction_INVOKEDYNAMIC_2 , $desc, $handle);
  }
  
  public IConstructor Instruction_MONITORENTER() {
    
    return vf.constructor(_Instruction_MONITORENTER_0 );
  }
  
  public IConstructor Instruction_D2L() {
    
    return vf.constructor(_Instruction_D2L_0 );
  }
  
  public IConstructor Instruction_FMUL() {
    
    return vf.constructor(_Instruction_FMUL_0 );
  }
  
  public IConstructor Instruction_IF_ICMPNE(String $label) {
      
    if (!vf.string($label).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($label).getType() + " for vf.string($label):" + vf.string($label));
    }
    
    return vf.constructor(_Instruction_IF_ICMPNE_1 , vf.string($label));
  }
  
  public IConstructor Instruction_IALOAD() {
    
    return vf.constructor(_Instruction_IALOAD_0 );
  }
  
  public IConstructor Instruction_ARRAYLENGTH() {
    
    return vf.constructor(_Instruction_ARRAYLENGTH_0 );
  }
  
  public IConstructor Instruction_INVOKEVIRTUAL(IConstructor $class, IConstructor $desc, boolean $isInterface) {
      
    if (!$class.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $class.getType() + " for $class:" + $class);
    }
      
    if (!$desc.getType().isSubtypeOf(_Signature)) {
      throw new IllegalArgumentException("Expected " + _Signature + " but got " + $desc.getType() + " for $desc:" + $desc);
    }
      
    if (!vf.bool($isInterface).getType().isSubtypeOf(tf.boolType())) {
      throw new IllegalArgumentException("Expected " + tf.boolType() + " but got " + vf.bool($isInterface).getType() + " for vf.bool($isInterface):" + vf.bool($isInterface));
    }
    
    return vf.constructor(_Instruction_INVOKEVIRTUAL_3 , $class, $desc, vf.bool($isInterface));
  }
  
  public IConstructor Instruction_DUP() {
    
    return vf.constructor(_Instruction_DUP_0 );
  }
  
  public IConstructor Instruction_IFNONNULL(String $label) {
      
    if (!vf.string($label).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($label).getType() + " for vf.string($label):" + vf.string($label));
    }
    
    return vf.constructor(_Instruction_IFNONNULL_1 , vf.string($label));
  }
  
  public IConstructor Instruction_LABEL(String $label) {
      
    if (!vf.string($label).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($label).getType() + " for vf.string($label):" + vf.string($label));
    }
    
    return vf.constructor(_Instruction_LABEL_1 , vf.string($label));
  }
  
  public IConstructor Instruction_DSUB() {
    
    return vf.constructor(_Instruction_DSUB_0 );
  }
  
  public IConstructor Instruction_TABLESWITCH(int $min, int $max, String $defaultLabel, IList $labels) {
      
    if (!vf.integer($min).getType().isSubtypeOf(tf.integerType())) {
      throw new IllegalArgumentException("Expected " + tf.integerType() + " but got " + vf.integer($min).getType() + " for vf.integer($min):" + vf.integer($min));
    }
      
    if (!vf.integer($max).getType().isSubtypeOf(tf.integerType())) {
      throw new IllegalArgumentException("Expected " + tf.integerType() + " but got " + vf.integer($max).getType() + " for vf.integer($max):" + vf.integer($max));
    }
      
    if (!vf.string($defaultLabel).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($defaultLabel).getType() + " for vf.string($defaultLabel):" + vf.string($defaultLabel));
    }
      
    if (!$labels.getType().isSubtypeOf(tf.listType(tf.stringType()))) {
      throw new IllegalArgumentException("Expected " + tf.listType(tf.stringType()) + " but got " + $labels.getType() + " for $labels:" + $labels);
    }
    
    return vf.constructor(_Instruction_TABLESWITCH_4 , vf.integer($min), vf.integer($max), vf.string($defaultLabel), $labels);
  }
  
  public IConstructor Instruction_IFNE(String $label) {
      
    if (!vf.string($label).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($label).getType() + " for vf.string($label):" + vf.string($label));
    }
    
    return vf.constructor(_Instruction_IFNE_1 , vf.string($label));
  }
  
  public IConstructor Instruction_LSTORE(int $var) {
      
    if (!vf.integer($var).getType().isSubtypeOf(tf.integerType())) {
      throw new IllegalArgumentException("Expected " + tf.integerType() + " but got " + vf.integer($var).getType() + " for vf.integer($var):" + vf.integer($var));
    }
    
    return vf.constructor(_Instruction_LSTORE_1 , vf.integer($var));
  }
  
  public IConstructor Instruction_LRETURN() {
    
    return vf.constructor(_Instruction_LRETURN_0 );
  }
  
  public IConstructor Instruction_F2I() {
    
    return vf.constructor(_Instruction_F2I_0 );
  }
  
  public IConstructor Instruction_DADD() {
    
    return vf.constructor(_Instruction_DADD_0 );
  }
  
  public IConstructor Instruction_I2F() {
    
    return vf.constructor(_Instruction_I2F_0 );
  }
  
  public IConstructor Instruction_NEWARRAY(IConstructor $element) {
      
    if (!$element.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $element.getType() + " for $element:" + $element);
    }
    
    return vf.constructor(_Instruction_NEWARRAY_1 , $element);
  }
  
  public IConstructor Instruction_DUP_X2() {
    
    return vf.constructor(_Instruction_DUP_X2_0 );
  }
  
  public IConstructor Instruction_LCMP() {
    
    return vf.constructor(_Instruction_LCMP_0 );
  }
  
  public IConstructor Instruction_stat(IConstructor $statement) {
      
    if (!$statement.getType().isSubtypeOf(_Stat)) {
      throw new IllegalArgumentException("Expected " + _Stat + " but got " + $statement.getType() + " for $statement:" + $statement);
    }
    
    return vf.constructor(_Instruction_stat_1 , $statement);
  }
  
  public IConstructor Instruction_FSUB() {
    
    return vf.constructor(_Instruction_FSUB_0 );
  }
  
  public IConstructor Instruction_I2C() {
    
    return vf.constructor(_Instruction_I2C_0 );
  }
  
  public IConstructor Instruction_PUTSTATIC(IConstructor $class, String $name, IConstructor $type) {
      
    if (!$class.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $class.getType() + " for $class:" + $class);
    }
      
    if (!vf.string($name).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($name).getType() + " for vf.string($name):" + vf.string($name));
    }
      
    if (!$type.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $type.getType() + " for $type:" + $type);
    }
    
    return vf.constructor(_Instruction_PUTSTATIC_3 , $class, vf.string($name), $type);
  }
  
  public IConstructor Instruction_LALOAD() {
    
    return vf.constructor(_Instruction_LALOAD_0 );
  }
  
  public IConstructor Instruction_IF_ACMPEQ(String $label) {
      
    if (!vf.string($label).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($label).getType() + " for vf.string($label):" + vf.string($label));
    }
    
    return vf.constructor(_Instruction_IF_ACMPEQ_1 , vf.string($label));
  }
  
  public IConstructor Instruction_LOOKUPSWITCH(String $defaultLabel, IList $keys, IList $labels) {
      
    if (!vf.string($defaultLabel).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($defaultLabel).getType() + " for vf.string($defaultLabel):" + vf.string($defaultLabel));
    }
      
    if (!$keys.getType().isSubtypeOf(tf.listType(tf.integerType()))) {
      throw new IllegalArgumentException("Expected " + tf.listType(tf.integerType()) + " but got " + $keys.getType() + " for $keys:" + $keys);
    }
      
    if (!$labels.getType().isSubtypeOf(tf.listType(tf.stringType()))) {
      throw new IllegalArgumentException("Expected " + tf.listType(tf.stringType()) + " but got " + $labels.getType() + " for $labels:" + $labels);
    }
    
    return vf.constructor(_Instruction_LOOKUPSWITCH_3 , vf.string($defaultLabel), $keys, $labels);
  }
  
  public IConstructor Instruction_FADD() {
    
    return vf.constructor(_Instruction_FADD_0 );
  }
  
  public IConstructor Instruction_IMUL() {
    
    return vf.constructor(_Instruction_IMUL_0 );
  }
  
  public IConstructor Instruction_I2D() {
    
    return vf.constructor(_Instruction_I2D_0 );
  }
  
  public IConstructor Instruction_D2I() {
    
    return vf.constructor(_Instruction_D2I_0 );
  }
  
  public IConstructor Instruction_LLOAD(int $var) {
      
    if (!vf.integer($var).getType().isSubtypeOf(tf.integerType())) {
      throw new IllegalArgumentException("Expected " + tf.integerType() + " but got " + vf.integer($var).getType() + " for vf.integer($var):" + vf.integer($var));
    }
    
    return vf.constructor(_Instruction_LLOAD_1 , vf.integer($var));
  }
  
  public IConstructor Instruction_IADD() {
    
    return vf.constructor(_Instruction_IADD_0 );
  }
  
  public IConstructor Instruction_LMUL() {
    
    return vf.constructor(_Instruction_LMUL_0 );
  }
  
  public IConstructor Instruction_F2D() {
    
    return vf.constructor(_Instruction_F2D_0 );
  }
  
  public IConstructor Instruction_MONITOREXIT() {
    
    return vf.constructor(_Instruction_MONITOREXIT_0 );
  }
  
  public IConstructor Instruction_D2F() {
    
    return vf.constructor(_Instruction_D2F_0 );
  }
  
  public IConstructor Instruction_IRETURN() {
    
    return vf.constructor(_Instruction_IRETURN_0 );
  }
  
  public IConstructor Instruction_DUP_X1() {
    
    return vf.constructor(_Instruction_DUP_X1_0 );
  }
  
  public IConstructor Instruction_I2B() {
    
    return vf.constructor(_Instruction_I2B_0 );
  }
  
  public IConstructor Instruction_SIPUSH(int $val) {
      
    if (!vf.integer($val).getType().isSubtypeOf(tf.integerType())) {
      throw new IllegalArgumentException("Expected " + tf.integerType() + " but got " + vf.integer($val).getType() + " for vf.integer($val):" + vf.integer($val));
    }
    
    return vf.constructor(_Instruction_SIPUSH_1 , vf.integer($val));
  }
  
  public IConstructor Instruction_ILOAD(int $var) {
      
    if (!vf.integer($var).getType().isSubtypeOf(tf.integerType())) {
      throw new IllegalArgumentException("Expected " + tf.integerType() + " but got " + vf.integer($var).getType() + " for vf.integer($var):" + vf.integer($var));
    }
    
    return vf.constructor(_Instruction_ILOAD_1 , vf.integer($var));
  }
  
  public IConstructor Instruction_AALOAD() {
    
    return vf.constructor(_Instruction_AALOAD_0 );
  }
  
  public IConstructor Instruction_DUP2_X2() {
    
    return vf.constructor(_Instruction_DUP2_X2_0 );
  }
  
  public IConstructor Instruction_FASTORE() {
    
    return vf.constructor(_Instruction_FASTORE_0 );
  }
  
  public IConstructor Instruction_FCMPG() {
    
    return vf.constructor(_Instruction_FCMPG_0 );
  }
  
  public IConstructor Instruction_INEG() {
    
    return vf.constructor(_Instruction_INEG_0 );
  }
  
  public IConstructor Instruction_CALOAD() {
    
    return vf.constructor(_Instruction_CALOAD_0 );
  }
  
  public IConstructor Instruction_DASTORE() {
    
    return vf.constructor(_Instruction_DASTORE_0 );
  }
  
  public IConstructor Instruction_IF_ICMPGT(String $label) {
      
    if (!vf.string($label).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($label).getType() + " for vf.string($label):" + vf.string($label));
    }
    
    return vf.constructor(_Instruction_IF_ICMPGT_1 , vf.string($label));
  }
  
  public IConstructor Instruction_LNEG() {
    
    return vf.constructor(_Instruction_LNEG_0 );
  }
  
  public IConstructor Instruction_ACONST_NULL() {
    
    return vf.constructor(_Instruction_ACONST_NULL_0 );
  }
  
  public IConstructor Instruction_ATHROW() {
    
    return vf.constructor(_Instruction_ATHROW_0 );
  }
  
  public IConstructor Instruction_DCMPG() {
    
    return vf.constructor(_Instruction_DCMPG_0 );
  }
  
  public IConstructor Instruction_BALOAD() {
    
    return vf.constructor(_Instruction_BALOAD_0 );
  }
  
  public IConstructor Instruction_DUP2_X1() {
    
    return vf.constructor(_Instruction_DUP2_X1_0 );
  }
  
  public IConstructor Instruction_FLOAD(int $var) {
      
    if (!vf.integer($var).getType().isSubtypeOf(tf.integerType())) {
      throw new IllegalArgumentException("Expected " + tf.integerType() + " but got " + vf.integer($var).getType() + " for vf.integer($var):" + vf.integer($var));
    }
    
    return vf.constructor(_Instruction_FLOAD_1 , vf.integer($var));
  }
  
  public IConstructor Instruction_LDIV() {
    
    return vf.constructor(_Instruction_LDIV_0 );
  }
  
  public IConstructor Instruction_IFGT(String $label) {
      
    if (!vf.string($label).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($label).getType() + " for vf.string($label):" + vf.string($label));
    }
    
    return vf.constructor(_Instruction_IFGT_1 , vf.string($label));
  }
  
  public IConstructor Instruction_BASTORE() {
    
    return vf.constructor(_Instruction_BASTORE_0 );
  }
  
  public IConstructor Instruction_CASTORE() {
    
    return vf.constructor(_Instruction_CASTORE_0 );
  }
  
  public IConstructor Instruction_GETSTATIC(IConstructor $class, String $name, IConstructor $type) {
      
    if (!$class.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $class.getType() + " for $class:" + $class);
    }
      
    if (!vf.string($name).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($name).getType() + " for vf.string($name):" + vf.string($name));
    }
      
    if (!$type.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $type.getType() + " for $type:" + $type);
    }
    
    return vf.constructor(_Instruction_GETSTATIC_3 , $class, vf.string($name), $type);
  }
  
  public IConstructor Instruction_L2I() {
    
    return vf.constructor(_Instruction_L2I_0 );
  }
  
  public IConstructor Instruction_DLOAD(int $var) {
      
    if (!vf.integer($var).getType().isSubtypeOf(tf.integerType())) {
      throw new IllegalArgumentException("Expected " + tf.integerType() + " but got " + vf.integer($var).getType() + " for vf.integer($var):" + vf.integer($var));
    }
    
    return vf.constructor(_Instruction_DLOAD_1 , vf.integer($var));
  }
  
  public IConstructor Instruction_GETFIELD(IConstructor $class, String $name, IConstructor $type) {
      
    if (!$class.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $class.getType() + " for $class:" + $class);
    }
      
    if (!vf.string($name).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($name).getType() + " for vf.string($name):" + vf.string($name));
    }
      
    if (!$type.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $type.getType() + " for $type:" + $type);
    }
    
    return vf.constructor(_Instruction_GETFIELD_3 , $class, vf.string($name), $type);
  }
  
  public IConstructor Instruction_I2L() {
    
    return vf.constructor(_Instruction_I2L_0 );
  }
  
  public IConstructor Instruction_DALOAD() {
    
    return vf.constructor(_Instruction_DALOAD_0 );
  }
  
  public IConstructor Instruction_IF_ICMPEQ(String $label) {
      
    if (!vf.string($label).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($label).getType() + " for vf.string($label):" + vf.string($label));
    }
    
    return vf.constructor(_Instruction_IF_ICMPEQ_1 , vf.string($label));
  }
  
  public IConstructor Instruction_L2F() {
    
    return vf.constructor(_Instruction_L2F_0 );
  }
  
  public IConstructor Instruction_F2L() {
    
    return vf.constructor(_Instruction_F2L_0 );
  }
  
  public IConstructor Instruction_DMUL() {
    
    return vf.constructor(_Instruction_DMUL_0 );
  }
  
  public IConstructor Instruction_IFEQ(String $label) {
      
    if (!vf.string($label).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($label).getType() + " for vf.string($label):" + vf.string($label));
    }
    
    return vf.constructor(_Instruction_IFEQ_1 , vf.string($label));
  }
  
  public IConstructor Instruction_INSTANCEOF(IConstructor $type) {
      
    if (!$type.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $type.getType() + " for $type:" + $type);
    }
    
    return vf.constructor(_Instruction_INSTANCEOF_1 , $type);
  }
  
  public IConstructor Instruction_JSR(String $label) {
      
    if (!vf.string($label).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($label).getType() + " for vf.string($label):" + vf.string($label));
    }
    
    return vf.constructor(_Instruction_JSR_1 , vf.string($label));
  }
  
  public IConstructor Instruction_AASTORE() {
    
    return vf.constructor(_Instruction_AASTORE_0 );
  }
  
  public IConstructor Instruction_POP2() {
    
    return vf.constructor(_Instruction_POP2_0 );
  }
  
  public IConstructor Instruction_FALOAD() {
    
    return vf.constructor(_Instruction_FALOAD_0 );
  }
  
  public IConstructor Instruction_FCONST_0() {
    
    return vf.constructor(_Instruction_FCONST_0_0 );
  }
  
  public IConstructor Instruction_ISHL() {
    
    return vf.constructor(_Instruction_ISHL_0 );
  }
  
  public IConstructor Instruction_ALOAD(int $var) {
      
    if (!vf.integer($var).getType().isSubtypeOf(tf.integerType())) {
      throw new IllegalArgumentException("Expected " + tf.integerType() + " but got " + vf.integer($var).getType() + " for vf.integer($var):" + vf.integer($var));
    }
    
    return vf.constructor(_Instruction_ALOAD_1 , vf.integer($var));
  }
  
  public IConstructor Instruction_ICONST_3() {
    
    return vf.constructor(_Instruction_ICONST_3_0 );
  }
  
  public IConstructor Instruction_LREM() {
    
    return vf.constructor(_Instruction_LREM_0 );
  }
  
  public IConstructor Instruction_IAND() {
    
    return vf.constructor(_Instruction_IAND_0 );
  }
  
  public IConstructor Instruction_TRYCATCH(IConstructor $type, String $start, String $end, String $handler) {
      
    if (!$type.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $type.getType() + " for $type:" + $type);
    }
      
    if (!vf.string($start).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($start).getType() + " for vf.string($start):" + vf.string($start));
    }
      
    if (!vf.string($end).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($end).getType() + " for vf.string($end):" + vf.string($end));
    }
      
    if (!vf.string($handler).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($handler).getType() + " for vf.string($handler):" + vf.string($handler));
    }
    
    return vf.constructor(_Instruction_TRYCATCH_4 , $type, vf.string($start), vf.string($end), vf.string($handler));
  }
  
  public IConstructor Instruction_IF_ICMPLT(String $label) {
      
    if (!vf.string($label).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($label).getType() + " for vf.string($label):" + vf.string($label));
    }
    
    return vf.constructor(_Instruction_IF_ICMPLT_1 , vf.string($label));
  }
  
  public IConstructor Instruction_NOP() {
    
    return vf.constructor(_Instruction_NOP_0 );
  }
  
  public IConstructor Instruction_ICONST_4() {
    
    return vf.constructor(_Instruction_ICONST_4_0 );
  }
  
  public IConstructor Instruction_LXOR() {
    
    return vf.constructor(_Instruction_LXOR_0 );
  }
  
  public IConstructor Instruction_LOR() {
    
    return vf.constructor(_Instruction_LOR_0 );
  }
  
  public IConstructor Instruction_FCONST_1() {
    
    return vf.constructor(_Instruction_FCONST_1_0 );
  }
  
  public IConstructor Instruction_IOR() {
    
    return vf.constructor(_Instruction_IOR_0 );
  }
  
  public IConstructor Instruction_DNEG() {
    
    return vf.constructor(_Instruction_DNEG_0 );
  }
  
  public IConstructor Instruction_FCMPL() {
    
    return vf.constructor(_Instruction_FCMPL_0 );
  }
  
  public IConstructor Instruction_PUTFIELD(IConstructor $class, String $name, IConstructor $type) {
      
    if (!$class.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $class.getType() + " for $class:" + $class);
    }
      
    if (!vf.string($name).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($name).getType() + " for vf.string($name):" + vf.string($name));
    }
      
    if (!$type.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $type.getType() + " for $type:" + $type);
    }
    
    return vf.constructor(_Instruction_PUTFIELD_3 , $class, vf.string($name), $type);
  }
  
  public IConstructor Instruction_LASTORE() {
    
    return vf.constructor(_Instruction_LASTORE_0 );
  }
  
  public IConstructor Instruction_IFNULL(String $label) {
      
    if (!vf.string($label).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($label).getType() + " for vf.string($label):" + vf.string($label));
    }
    
    return vf.constructor(_Instruction_IFNULL_1 , vf.string($label));
  }
  
  public IConstructor Instruction_ICONST_1() {
    
    return vf.constructor(_Instruction_ICONST_1_0 );
  }
  
  public IConstructor Instruction_NEW(IConstructor $type) {
      
    if (!$type.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $type.getType() + " for $type:" + $type);
    }
    
    return vf.constructor(_Instruction_NEW_1 , $type);
  }
  
  public IConstructor Instruction_INVOKESPECIAL(IConstructor $class, IConstructor $desc, boolean $isInterface) {
      
    if (!$class.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $class.getType() + " for $class:" + $class);
    }
      
    if (!$desc.getType().isSubtypeOf(_Signature)) {
      throw new IllegalArgumentException("Expected " + _Signature + " but got " + $desc.getType() + " for $desc:" + $desc);
    }
      
    if (!vf.bool($isInterface).getType().isSubtypeOf(tf.boolType())) {
      throw new IllegalArgumentException("Expected " + tf.boolType() + " but got " + vf.bool($isInterface).getType() + " for vf.bool($isInterface):" + vf.bool($isInterface));
    }
    
    return vf.constructor(_Instruction_INVOKESPECIAL_3 , $class, $desc, vf.bool($isInterface));
  }
  
  public IConstructor Instruction_IFLT(String $label) {
      
    if (!vf.string($label).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($label).getType() + " for vf.string($label):" + vf.string($label));
    }
    
    return vf.constructor(_Instruction_IFLT_1 , vf.string($label));
  }
  
  public IConstructor Instruction_INVOKEINTERFACE(IConstructor $class, IConstructor $desc, boolean $isInterface) {
      
    if (!$class.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $class.getType() + " for $class:" + $class);
    }
      
    if (!$desc.getType().isSubtypeOf(_Signature)) {
      throw new IllegalArgumentException("Expected " + _Signature + " but got " + $desc.getType() + " for $desc:" + $desc);
    }
      
    if (!vf.bool($isInterface).getType().isSubtypeOf(tf.boolType())) {
      throw new IllegalArgumentException("Expected " + tf.boolType() + " but got " + vf.bool($isInterface).getType() + " for vf.bool($isInterface):" + vf.bool($isInterface));
    }
    
    return vf.constructor(_Instruction_INVOKEINTERFACE_3 , $class, $desc, vf.bool($isInterface));
  }
  
  public IConstructor Instruction_DDIV() {
    
    return vf.constructor(_Instruction_DDIV_0 );
  }
  
  public IConstructor Instruction_ICONST_2() {
    
    return vf.constructor(_Instruction_ICONST_2_0 );
  }
  
  public IConstructor Instruction_FNEG() {
    
    return vf.constructor(_Instruction_FNEG_0 );
  }
  
  public IConstructor Instruction_INVOKESTATIC(IConstructor $class, IConstructor $desc, boolean $isInterface) {
      
    if (!$class.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $class.getType() + " for $class:" + $class);
    }
      
    if (!$desc.getType().isSubtypeOf(_Signature)) {
      throw new IllegalArgumentException("Expected " + _Signature + " but got " + $desc.getType() + " for $desc:" + $desc);
    }
      
    if (!vf.bool($isInterface).getType().isSubtypeOf(tf.boolType())) {
      throw new IllegalArgumentException("Expected " + tf.boolType() + " but got " + vf.bool($isInterface).getType() + " for vf.bool($isInterface):" + vf.bool($isInterface));
    }
    
    return vf.constructor(_Instruction_INVOKESTATIC_3 , $class, $desc, vf.bool($isInterface));
  }
  
  public IConstructor Instruction_DCMPL() {
    
    return vf.constructor(_Instruction_DCMPL_0 );
  }
  
  public IConstructor Instruction_CHECKCAST(IConstructor $type) {
      
    if (!$type.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $type.getType() + " for $type:" + $type);
    }
    
    return vf.constructor(_Instruction_CHECKCAST_1 , $type);
  }
  
  public IConstructor Instruction_I2S() {
    
    return vf.constructor(_Instruction_I2S_0 );
  }
  
  public IConstructor Instruction_LINENUMBER(int $line, String $label) {
      
    if (!vf.integer($line).getType().isSubtypeOf(tf.integerType())) {
      throw new IllegalArgumentException("Expected " + tf.integerType() + " but got " + vf.integer($line).getType() + " for vf.integer($line):" + vf.integer($line));
    }
      
    if (!vf.string($label).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($label).getType() + " for vf.string($label):" + vf.string($label));
    }
    
    return vf.constructor(_Instruction_LINENUMBER_2 , vf.integer($line), vf.string($label));
  }
  
  public IConstructor Instruction_FDIV() {
    
    return vf.constructor(_Instruction_FDIV_0 );
  }
  
  public IConstructor Instruction_ICONST_0() {
    
    return vf.constructor(_Instruction_ICONST_0_0 );
  }
  
  public IConstructor Instruction_LAND() {
    
    return vf.constructor(_Instruction_LAND_0 );
  }
  
  public IConstructor Instruction_GOTO(String $label) {
      
    if (!vf.string($label).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($label).getType() + " for vf.string($label):" + vf.string($label));
    }
    
    return vf.constructor(_Instruction_GOTO_1 , vf.string($label));
  }
  
  public IConstructor Instruction_LSHL() {
    
    return vf.constructor(_Instruction_LSHL_0 );
  }
  
  public IConstructor Instruction_IDIV() {
    
    return vf.constructor(_Instruction_IDIV_0 );
  }
  
  public IConstructor Instruction_IINC(int $var, int $inc) {
      
    if (!vf.integer($var).getType().isSubtypeOf(tf.integerType())) {
      throw new IllegalArgumentException("Expected " + tf.integerType() + " but got " + vf.integer($var).getType() + " for vf.integer($var):" + vf.integer($var));
    }
      
    if (!vf.integer($inc).getType().isSubtypeOf(tf.integerType())) {
      throw new IllegalArgumentException("Expected " + tf.integerType() + " but got " + vf.integer($inc).getType() + " for vf.integer($inc):" + vf.integer($inc));
    }
    
    return vf.constructor(_Instruction_IINC_2 , vf.integer($var), vf.integer($inc));
  }
  
  public IConstructor Instruction_RET(int $var) {
      
    if (!vf.integer($var).getType().isSubtypeOf(tf.integerType())) {
      throw new IllegalArgumentException("Expected " + tf.integerType() + " but got " + vf.integer($var).getType() + " for vf.integer($var):" + vf.integer($var));
    }
    
    return vf.constructor(_Instruction_RET_1 , vf.integer($var));
  }
  
  public IConstructor Instruction_BIPUSH(int $val) {
      
    if (!vf.integer($val).getType().isSubtypeOf(tf.integerType())) {
      throw new IllegalArgumentException("Expected " + tf.integerType() + " but got " + vf.integer($val).getType() + " for vf.integer($val):" + vf.integer($val));
    }
    
    return vf.constructor(_Instruction_BIPUSH_1 , vf.integer($val));
  }
  
  public IConstructor Instruction_LCONST_0() {
    
    return vf.constructor(_Instruction_LCONST_0_0 );
  }
  
  public IConstructor Instruction_ICONST_M1() {
    
    return vf.constructor(_Instruction_ICONST_M1_0 );
  }
  
  public IConstructor Instruction_ASTORE(int $var) {
      
    if (!vf.integer($var).getType().isSubtypeOf(tf.integerType())) {
      throw new IllegalArgumentException("Expected " + tf.integerType() + " but got " + vf.integer($var).getType() + " for vf.integer($var):" + vf.integer($var));
    }
    
    return vf.constructor(_Instruction_ASTORE_1 , vf.integer($var));
  }
  
  public IConstructor Instruction_IASTORE() {
    
    return vf.constructor(_Instruction_IASTORE_0 );
  }
  
  public IConstructor Instruction_LCONST_1() {
    
    return vf.constructor(_Instruction_LCONST_1_0 );
  }
  
  
  public IConstructor Modifier_abstract() {
    
    return vf.constructor(_Modifier_abstract_0 );
  }
  
  public IConstructor Modifier_private() {
    
    return vf.constructor(_Modifier_private_0 );
  }
  
  public IConstructor Modifier_friendly() {
    
    return vf.constructor(_Modifier_friendly_0 );
  }
  
  public IConstructor Modifier_public() {
    
    return vf.constructor(_Modifier_public_0 );
  }
  
  public IConstructor Modifier_final() {
    
    return vf.constructor(_Modifier_final_0 );
  }
  
  public IConstructor Modifier_synchronized() {
    
    return vf.constructor(_Modifier_synchronized_0 );
  }
  
  public IConstructor Modifier_static() {
    
    return vf.constructor(_Modifier_static_0 );
  }
  
  public IConstructor Modifier_protected() {
    
    return vf.constructor(_Modifier_protected_0 );
  }
  
  
  public IConstructor RetentionPolicy_source() {
    
    return vf.constructor(_RetentionPolicy_source_0 );
  }
  
  public IConstructor RetentionPolicy_class() {
    
    return vf.constructor(_RetentionPolicy_class_0 );
  }
  
  public IConstructor RetentionPolicy_runtime() {
    
    return vf.constructor(_RetentionPolicy_runtime_0 );
  }
  
  
  public IConstructor Signature_methodDesc(IConstructor $return, String $name, IList $formals) {
      
    if (!$return.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $return.getType() + " for $return:" + $return);
    }
      
    if (!vf.string($name).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($name).getType() + " for vf.string($name):" + vf.string($name));
    }
      
    if (!$formals.getType().isSubtypeOf(tf.listType(_Type))) {
      throw new IllegalArgumentException("Expected " + tf.listType(_Type) + " but got " + $formals.getType() + " for $formals:" + $formals);
    }
    
    return vf.constructor(_Signature_methodDesc_3 , $return, vf.string($name), $formals);
  }
  
  public IConstructor Signature_constructorDesc(IList $formals) {
      
    if (!$formals.getType().isSubtypeOf(tf.listType(_Type))) {
      throw new IllegalArgumentException("Expected " + tf.listType(_Type) + " but got " + $formals.getType() + " for $formals:" + $formals);
    }
    
    return vf.constructor(_Signature_constructorDesc_1 , $formals);
  }
  
  
  public IConstructor Stat_asm(IList $instructions) {
      
    if (!$instructions.getType().isSubtypeOf(tf.listType(_Instruction))) {
      throw new IllegalArgumentException("Expected " + tf.listType(_Instruction) + " but got " + $instructions.getType() + " for $instructions:" + $instructions);
    }
    
    return vf.constructor(_Stat_asm_1 , $instructions);
  }
  
  public IConstructor Stat_do(IConstructor $exp) {
      
    if (!$exp.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $exp.getType() + " for $exp:" + $exp);
    }
    
    return vf.constructor(_Stat_do_1 , $exp);
  }
  
  public IConstructor Stat_if(IConstructor $condition, IList $thenBlock) {
      
    if (!$condition.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $condition.getType() + " for $condition:" + $condition);
    }
      
    if (!$thenBlock.getType().isSubtypeOf(tf.listType(_Stat))) {
      throw new IllegalArgumentException("Expected " + tf.listType(_Stat) + " but got " + $thenBlock.getType() + " for $thenBlock:" + $thenBlock);
    }
    
    return vf.constructor(_Stat_if_2 , $condition, $thenBlock);
  }
  
  public IConstructor Stat_try(IList $block, IList $catch) {
      
    if (!$block.getType().isSubtypeOf(tf.listType(_Stat))) {
      throw new IllegalArgumentException("Expected " + tf.listType(_Stat) + " but got " + $block.getType() + " for $block:" + $block);
    }
      
    if (!$catch.getType().isSubtypeOf(tf.listType(_Handler))) {
      throw new IllegalArgumentException("Expected " + tf.listType(_Handler) + " but got " + $catch.getType() + " for $catch:" + $catch);
    }
    
    return vf.constructor(_Stat_try_2 , $block, $catch);
  }
  
  public IConstructor Stat_store(String $name, IConstructor $value) {
      
    if (!vf.string($name).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($name).getType() + " for vf.string($name):" + vf.string($name));
    }
      
    if (!$value.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $value.getType() + " for $value:" + $value);
    }
    
    return vf.constructor(_Stat_store_2 , vf.string($name), $value);
  }
  
  public IConstructor Stat_if(IConstructor $condition, IList $thenBlock, IList $elseBlock) {
      
    if (!$condition.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $condition.getType() + " for $condition:" + $condition);
    }
      
    if (!$thenBlock.getType().isSubtypeOf(tf.listType(_Stat))) {
      throw new IllegalArgumentException("Expected " + tf.listType(_Stat) + " but got " + $thenBlock.getType() + " for $thenBlock:" + $thenBlock);
    }
      
    if (!$elseBlock.getType().isSubtypeOf(tf.listType(_Stat))) {
      throw new IllegalArgumentException("Expected " + tf.listType(_Stat) + " but got " + $elseBlock.getType() + " for $elseBlock:" + $elseBlock);
    }
    
    return vf.constructor(_Stat_if_3 , $condition, $thenBlock, $elseBlock);
  }
  
  public IConstructor Stat_doWhile(IList $block, IConstructor $condition) {
      
    if (!$block.getType().isSubtypeOf(tf.listType(_Stat))) {
      throw new IllegalArgumentException("Expected " + tf.listType(_Stat) + " but got " + $block.getType() + " for $block:" + $block);
    }
      
    if (!$condition.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $condition.getType() + " for $condition:" + $condition);
    }
    
    return vf.constructor(_Stat_doWhile_2 , $block, $condition);
  }
  
  public IConstructor Stat_throw(IConstructor $arg) {
      
    if (!$arg.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $arg.getType() + " for $arg:" + $arg);
    }
    
    return vf.constructor(_Stat_throw_1 , $arg);
  }
  
  public IConstructor Stat_invokeSuper(IConstructor $desc, IList $args) {
      
    if (!$desc.getType().isSubtypeOf(_Signature)) {
      throw new IllegalArgumentException("Expected " + _Signature + " but got " + $desc.getType() + " for $desc:" + $desc);
    }
      
    if (!$args.getType().isSubtypeOf(tf.listType(_Exp))) {
      throw new IllegalArgumentException("Expected " + tf.listType(_Exp) + " but got " + $args.getType() + " for $args:" + $args);
    }
    
    return vf.constructor(_Stat_invokeSuper_2 , $desc, $args);
  }
  
  public IConstructor Stat_continue() {
    
    return vf.constructor(_Stat_continue_0 );
  }
  
  public IConstructor Stat_for(IList $init, IConstructor $condition, IList $next, IList $statements) {
      
    if (!$init.getType().isSubtypeOf(tf.listType(_Stat))) {
      throw new IllegalArgumentException("Expected " + tf.listType(_Stat) + " but got " + $init.getType() + " for $init:" + $init);
    }
      
    if (!$condition.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $condition.getType() + " for $condition:" + $condition);
    }
      
    if (!$next.getType().isSubtypeOf(tf.listType(_Stat))) {
      throw new IllegalArgumentException("Expected " + tf.listType(_Stat) + " but got " + $next.getType() + " for $next:" + $next);
    }
      
    if (!$statements.getType().isSubtypeOf(tf.listType(_Stat))) {
      throw new IllegalArgumentException("Expected " + tf.listType(_Stat) + " but got " + $statements.getType() + " for $statements:" + $statements);
    }
    
    return vf.constructor(_Stat_for_4 , $init, $condition, $next, $statements);
  }
  
  public IConstructor Stat_while(IConstructor $condition, IList $block) {
      
    if (!$condition.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $condition.getType() + " for $condition:" + $condition);
    }
      
    if (!$block.getType().isSubtypeOf(tf.listType(_Stat))) {
      throw new IllegalArgumentException("Expected " + tf.listType(_Stat) + " but got " + $block.getType() + " for $block:" + $block);
    }
    
    return vf.constructor(_Stat_while_2 , $condition, $block);
  }
  
  public IConstructor Stat_monitor(IConstructor $arg, IList $block) {
      
    if (!$arg.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $arg.getType() + " for $arg:" + $arg);
    }
      
    if (!$block.getType().isSubtypeOf(tf.listType(_Stat))) {
      throw new IllegalArgumentException("Expected " + tf.listType(_Stat) + " but got " + $block.getType() + " for $block:" + $block);
    }
    
    return vf.constructor(_Stat_monitor_2 , $arg, $block);
  }
  
  public IConstructor Stat_return() {
    
    return vf.constructor(_Stat_return_0 );
  }
  
  public IConstructor Stat_decl(IConstructor $type, String $name) {
      
    if (!$type.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $type.getType() + " for $type:" + $type);
    }
      
    if (!vf.string($name).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($name).getType() + " for vf.string($name):" + vf.string($name));
    }
    
    return vf.constructor(_Stat_decl_2 , $type, vf.string($name));
  }
  
  public IConstructor Stat_acquire(IConstructor $arg) {
      
    if (!$arg.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $arg.getType() + " for $arg:" + $arg);
    }
    
    return vf.constructor(_Stat_acquire_1 , $arg);
  }
  
  public IConstructor Stat_break() {
    
    return vf.constructor(_Stat_break_0 );
  }
  
  public IConstructor Stat_putField(IConstructor $class, IConstructor $receiver, IConstructor $type, String $name, IConstructor $arg) {
      
    if (!$class.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $class.getType() + " for $class:" + $class);
    }
      
    if (!$receiver.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $receiver.getType() + " for $receiver:" + $receiver);
    }
      
    if (!$type.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $type.getType() + " for $type:" + $type);
    }
      
    if (!vf.string($name).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($name).getType() + " for vf.string($name):" + vf.string($name));
    }
      
    if (!$arg.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $arg.getType() + " for $arg:" + $arg);
    }
    
    return vf.constructor(_Stat_putField_5 , $class, $receiver, $type, vf.string($name), $arg);
  }
  
  public IConstructor Stat_release(IConstructor $arg) {
      
    if (!$arg.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $arg.getType() + " for $arg:" + $arg);
    }
    
    return vf.constructor(_Stat_release_1 , $arg);
  }
  
  public IConstructor Stat_astore(IConstructor $array, IConstructor $index, IConstructor $arg) {
      
    if (!$array.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $array.getType() + " for $array:" + $array);
    }
      
    if (!$index.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $index.getType() + " for $index:" + $index);
    }
      
    if (!$arg.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $arg.getType() + " for $arg:" + $arg);
    }
    
    return vf.constructor(_Stat_astore_3 , $array, $index, $arg);
  }
  
  public IConstructor Stat_switch(IConstructor $arg, IList $cases) {
      
    if (!$arg.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $arg.getType() + " for $arg:" + $arg);
    }
      
    if (!$cases.getType().isSubtypeOf(tf.listType(_Case))) {
      throw new IllegalArgumentException("Expected " + tf.listType(_Case) + " but got " + $cases.getType() + " for $cases:" + $cases);
    }
    
    return vf.constructor(_Stat_switch_2 , $arg, $cases);
  }
  
  public IConstructor Stat_putStatic(IConstructor $class, String $name, IConstructor $type, IConstructor $arg) {
      
    if (!$class.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $class.getType() + " for $class:" + $class);
    }
      
    if (!vf.string($name).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($name).getType() + " for vf.string($name):" + vf.string($name));
    }
      
    if (!$type.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $type.getType() + " for $type:" + $type);
    }
      
    if (!$arg.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $arg.getType() + " for $arg:" + $arg);
    }
    
    return vf.constructor(_Stat_putStatic_4 , $class, vf.string($name), $type, $arg);
  }
  
  public IConstructor Stat_return(IConstructor $arg) {
      
    if (!$arg.getType().isSubtypeOf(_Exp)) {
      throw new IllegalArgumentException("Expected " + _Exp + " but got " + $arg.getType() + " for $arg:" + $arg);
    }
    
    return vf.constructor(_Stat_return_1 , $arg);
  }
  
  public IConstructor Stat_block(IList $block) {
      
    if (!$block.getType().isSubtypeOf(tf.listType(_Stat))) {
      throw new IllegalArgumentException("Expected " + tf.listType(_Stat) + " but got " + $block.getType() + " for $block:" + $block);
    }
    
    return vf.constructor(_Stat_block_1 , $block);
  }
  
  
  public IConstructor SwitchOption_lookup() {
    
    return vf.constructor(_SwitchOption_lookup_0 );
  }
  
  public IConstructor SwitchOption_table() {
    
    return vf.constructor(_SwitchOption_table_0 );
  }
  
  public IConstructor SwitchOption_auto() {
    
    return vf.constructor(_SwitchOption_auto_0 );
  }
  
  
  public IConstructor Type_character() {
    
    return vf.constructor(_Type_character_0 );
  }
  
  public IConstructor Type_array(IConstructor $arg) {
      
    if (!$arg.getType().isSubtypeOf(_Type)) {
      throw new IllegalArgumentException("Expected " + _Type + " but got " + $arg.getType() + " for $arg:" + $arg);
    }
    
    return vf.constructor(_Type_array_1 , $arg);
  }
  
  public IConstructor Type_integer() {
    
    return vf.constructor(_Type_integer_0 );
  }
  
  public IConstructor Type_byte() {
    
    return vf.constructor(_Type_byte_0 );
  }
  
  public IConstructor Type_boolean() {
    
    return vf.constructor(_Type_boolean_0 );
  }
  
  public IConstructor Type_long() {
    
    return vf.constructor(_Type_long_0 );
  }
  
  public IConstructor Type_float() {
    
    return vf.constructor(_Type_float_0 );
  }
  
  public IConstructor Type_short() {
    
    return vf.constructor(_Type_short_0 );
  }
  
  public IConstructor Type_object(String $name) {
      
    if (!vf.string($name).getType().isSubtypeOf(tf.stringType())) {
      throw new IllegalArgumentException("Expected " + tf.stringType() + " but got " + vf.string($name).getType() + " for vf.string($name):" + vf.string($name));
    }
    
    return vf.constructor(_Type_object_1 , vf.string($name));
  }
  
  public IConstructor Type_void() {
    
    return vf.constructor(_Type_void_0 );
  }
  
  public IConstructor Type_double() {
    
    return vf.constructor(_Type_double_0 );
  }
  
  public IConstructor Type_string() {
    
    return vf.constructor(_Type_string_0 );
  }
 
  
}